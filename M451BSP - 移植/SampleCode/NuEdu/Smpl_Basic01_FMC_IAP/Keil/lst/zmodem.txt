; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\zmodem.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\zmodem.d --cpu=Cortex-M4.fp --apcs=interwork -L6969W -I..\..\..\..\Library\Device\Nuvoton\M451Series\Include -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\NuEdu\inc -I.\zmodem -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\zmodem.crf zmodem\zmodem.c]
                          THUMB

                          AREA ||i.OneSramByte||, CODE, READONLY, ALIGN=2

                  OneSramByte PROC
;;;659    
;;;660    BYTE OneSramByte(DWORD add)
000000  a101              ADR      r1,|L1.8|
;;;661    {
;;;662    	unsigned char data;
;;;663    
;;;664    	data = TEXT_DATA[add];
000002  5c08              LDRB     r0,[r1,r0]
;;;665    	return data;
;;;666    }
000004  4770              BX       lr
;;;667    
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
000008  68656c6c          DCB      "hello world",0
00000c  6f20776f
000010  726c6400

                          AREA ||i.RZ_AckBibi||, CODE, READONLY, ALIGN=2

                  RZ_AckBibi PROC
;;;423    /*--------------------------------------------------------------------------*/
;;;424    void RZ_AckBibi(void)
000000  b570              PUSH     {r4-r6,lr}
;;;425    { int n;
;;;426    
;;;427      Z_PutLongIntoHeader(0L);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       Z_PutLongIntoHeader
;;;428      for (n=4; --n;) { BYTE c;
000008  2404              MOVS     r4,#4
;;;429        Z_SendHexHeader(ZFIN, Txhdr);
;;;430        c = Z_GetByte(1000); if (bTimeOut) return;
00000a  4e0c              LDR      r6,|L2.60|
00000c  f44f757a          MOV      r5,#0x3e8
000010  e010              B        |L2.52|
                  |L2.18|
000012  490a              LDR      r1,|L2.60|
000014  2008              MOVS     r0,#8                 ;429
000016  3124              ADDS     r1,r1,#0x24           ;429
000018  f7fffffe          BL       Z_SendHexHeader
00001c  4628              MOV      r0,r5
00001e  f7fffffe          BL       readline
000022  b2c1              UXTB     r1,r0
000024  7830              LDRB     r0,[r6,#0]  ; bTimeOut
000026  2800              CMP      r0,#0
000028  d106              BNE      |L2.56|
;;;431        if (c == 'O') Z_GetByte(1000);      // Discard 2nd 'O'   
00002a  294f              CMP      r1,#0x4f
00002c  d102              BNE      |L2.52|
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       readline
                  |L2.52|
000034  1e64              SUBS     r4,r4,#1
000036  d1ec              BNE      |L2.18|
                  |L2.56|
;;;432        }
;;;433    }
000038  bd70              POP      {r4-r6,pc}
;;;434    
                          ENDP

00003a  0000              DCW      0x0000
                  |L2.60|
                          DCD      ||.data||

                          AREA ||i.RZ_GetHeader||, CODE, READONLY, ALIGN=2

                  RZ_GetHeader PROC
;;;507    DWORD filesize; BYTE filename[32];
;;;508    int RZ_GetHeader(void)                                                          //RZ_GetHeader……
000000  b530              PUSH     {r4,r5,lr}
;;;509    { BYTE *p; BYTE i=0;
;;;510    
;;;511      filesize = 0L;
000002  4b10              LDR      r3,|L3.68|
000004  2100              MOVS     r1,#0                 ;509
;;;512      p = Recbuf; while (*p) filename[i++] = *p++; filename[i] = '\0'; p++;
000006  4810              LDR      r0,|L3.72|
000008  460d              MOV      r5,r1                 ;511
00000a  f1000440          ADD      r4,r0,#0x40
00000e  6319              STR      r1,[r3,#0x30]         ;509  ; filesize
000010  e003              B        |L3.26|
                  |L3.18|
000012  5462              STRB     r2,[r4,r1]
000014  1c49              ADDS     r1,r1,#1
000016  b2c9              UXTB     r1,r1
000018  1c40              ADDS     r0,r0,#1
                  |L3.26|
00001a  7802              LDRB     r2,[r0,#0]
00001c  2a00              CMP      r2,#0
00001e  d1f8              BNE      |L3.18|
000020  5465              STRB     r5,[r4,r1]
;;;513      while (*p) { filesize = filesize * 10 + (*p - '0'); p++; }
000022  f06f042f          MVN      r4,#0x2f
000026  e006              B        |L3.54|
                  |L3.40|
000028  6b1a              LDR      r2,[r3,#0x30]  ; filesize
00002a  eb020282          ADD      r2,r2,r2,LSL #2
00002e  eb040242          ADD      r2,r4,r2,LSL #1
000032  4411              ADD      r1,r1,r2
000034  6319              STR      r1,[r3,#0x30]  ; filesize
                  |L3.54|
000036  f8101f01          LDRB     r1,[r0,#1]!
00003a  2900              CMP      r1,#0
00003c  d1f4              BNE      |L3.40|
;;;514    
;;;515      return ZZOK;
00003e  2000              MOVS     r0,#0
;;;516    }
000040  bd30              POP      {r4,r5,pc}
;;;517    
                          ENDP

000042  0000              DCW      0x0000
                  |L3.68|
                          DCD      ||.data||
                  |L3.72|
                          DCD      ||.bss||+0x21

                          AREA ||i.RZ_InitReceiver||, CODE, READONLY, ALIGN=2

                  RZ_InitReceiver PROC
;;;444    /*--------------------------------------------------------------------------*/
;;;445    int RZ_InitReceiver(void)                                                       //RZ_InitReceiver,??????
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;446    { int n,errors = 0;
;;;447       
;;;448      for (n=3; --n>=0; ) {
;;;449        Z_PutLongIntoHeader(0L);
;;;450        Txhdr[ZF0] = CANFDX;        // | CANOVIO;
000004  f8df90f0          LDR      r9,|L4.248|
000008  2500              MOVS     r5,#0                 ;446
00000a  2603              MOVS     r6,#3                 ;448
;;;451        Z_SendHexHeader(Tryzhdrtype, Txhdr);
;;;452    
;;;453    AGAIN:
;;;454        switch (Z_GetHeader(Rxhdr)) {
;;;455          case ZRQINIT:     //USED
;;;456            Z_PutLongIntoHeader(0L);
;;;457            Txhdr[ZF0] = CANFDX;    // | CANOVIO;
;;;458            Z_SendHexHeader(ZRINIT, Txhdr);
;;;459            goto AGAIN;
;;;460          case ZFILE:       //USED
;;;461            Zconv = Rxhdr[ZF0];
;;;462            Tryzhdrtype = ZRINIT;
;;;463            if (RZ_ReceiveData(Recbuf,WAZOOMAX) == GOTCRCW) return ZFILE;
;;;464            Z_SendHexHeader(ZNAK, Txhdr);
;;;465            goto AGAIN;
;;;466          case ZSINIT:      //not used
;;;467            if (RZ_ReceiveData(Attn, ZATTNLEN) == GOTCRCW) Z_SendHexHeader(ZACK,Txhdr);
;;;468            else Z_SendHexHeader(ZNAK,Txhdr);
;;;469            goto AGAIN;
;;;470          case ZFREECNT:    //not used
;;;471            Z_PutLongIntoHeader(WAZOOMAX);
;;;472            Z_SendHexHeader(ZACK, Txhdr);
;;;473            goto AGAIN;
;;;474          case ZCOMMAND:    //not used
;;;475            /*-----------------------------------------*/
;;;476            /* Paranoia is good for you...             */
;;;477            /* Ignore command from remote, but lie and */
;;;478            /* say we did the command ok.              */
;;;479            /*-----------------------------------------*/
;;;480            if (RZ_ReceiveData(Recbuf,WAZOOMAX) == GOTCRCW) {
;;;481              Z_PutLongIntoHeader(0L); 
;;;482              do { Z_SendHexHeader(ZCOMPL, Txhdr); }
;;;483                 while (++errors<10 && Z_GetHeader(Rxhdr) != ZFIN);
;;;484              RZ_AckBibi();
;;;485              return ZCOMPL;
;;;486              }
;;;487            else Z_SendHexHeader(ZNAK, Txhdr);
;;;488            goto AGAIN;
;;;489          case ZCOMPL:      //not used
;;;490            goto AGAIN;
;;;491          case ZFIN:        //USED
;;;492            RZ_AckBibi(); return ZCOMPL;
;;;493          case ZCAN:        //USED
;;;494          case ZZRCDO: 
;;;495    		return ZZERROR;
00000c  f04f3bff          MOV      r11,#0xffffffff
000010  2401              MOVS     r4,#1                 ;450
000012  f1a90824          SUB      r8,r9,#0x24           ;451
000016  f44f5a00          MOV      r10,#0x2000           ;463
00001a  f240176b          MOV      r7,#0x16b             ;463
00001e  e021              B        |L4.100|
                  |L4.32|
000020  2000              MOVS     r0,#0                 ;449
000022  f7fffffe          BL       Z_PutLongIntoHeader
000026  f8894003          STRB     r4,[r9,#3]            ;450
00002a  f8980018          LDRB     r0,[r8,#0x18]         ;451  ; Tryzhdrtype
00002e  4932              LDR      r1,|L4.248|
000030  e040              B        |L4.180|
                  |L4.50|
000032  4831              LDR      r0,|L4.248|
000034  1f00              SUBS     r0,r0,#4              ;454
000036  f7fffffe          BL       Z_GetHeader
00003a  2808              CMP      r0,#8                 ;454
00003c  d057              BEQ      |L4.238|
00003e  dc09              BGT      |L4.84|
000040  f1000003          ADD      r0,r0,#3              ;454
000044  2808              CMP      r0,#8                 ;454
000046  d20d              BCS      |L4.100|
000048  e8dff000          TBB      [pc,r0]               ;454
00004c  0e0e0c11          DCB      0x0e,0x0e,0x0c,0x11
000050  0c2b0c19          DCB      0x0c,0x2b,0x0c,0x19
                  |L4.84|
000054  280f              CMP      r0,#0xf               ;454
000056  d0ec              BEQ      |L4.50|
000058  2810              CMP      r0,#0x10              ;454
00005a  d005              BEQ      |L4.104|
00005c  2811              CMP      r0,#0x11              ;454
00005e  d02c              BEQ      |L4.186|
000060  2812              CMP      r0,#0x12              ;454
000062  d02e              BEQ      |L4.194|
                  |L4.100|
000064  1e76              SUBS     r6,r6,#1              ;454
000066  d5db              BPL      |L4.32|
                  |L4.104|
;;;496          case ZZTIMEOUT:   //USED
;;;497            return ZZERROR;
;;;498          }
;;;499        }
;;;500        return ZZERROR;
000068  4658              MOV      r0,r11
                  |L4.106|
;;;501    }
00006a  e8bd9ff0          POP      {r4-r12,pc}
00006e  2000              MOVS     r0,#0                 ;456
000070  f7fffffe          BL       Z_PutLongIntoHeader
000074  f8894003          STRB     r4,[r9,#3]            ;457
000078  491f              LDR      r1,|L4.248|
00007a  2001              MOVS     r0,#1                 ;458
00007c  e01a              B        |L4.180|
00007e  481e              LDR      r0,|L4.248|
000080  1f00              SUBS     r0,r0,#4              ;461
000082  78c1              LDRB     r1,[r0,#3]            ;461  ; Rxhdr
000084  f8881002          STRB     r1,[r8,#2]            ;461
000088  4651              MOV      r1,r10                ;463
00008a  481c              LDR      r0,|L4.252|
00008c  f8c84018          STR      r4,[r8,#0x18]         ;463  ; Tryzhdrtype
000090  f7fffffe          BL       RZ_ReceiveData
000094  42b8              CMP      r0,r7                 ;463
000096  d101              BNE      |L4.156|
000098  2004              MOVS     r0,#4                 ;463
00009a  e7e6              B        |L4.106|
                  |L4.156|
00009c  4916              LDR      r1,|L4.248|
00009e  2006              MOVS     r0,#6                 ;464
0000a0  e008              B        |L4.180|
0000a2  4816              LDR      r0,|L4.252|
0000a4  2120              MOVS     r1,#0x20              ;467
0000a6  3821              SUBS     r0,r0,#0x21           ;467
0000a8  f7fffffe          BL       RZ_ReceiveData
0000ac  42b8              CMP      r0,r7                 ;467
0000ae  d1f5              BNE      |L4.156|
                  |L4.176|
0000b0  4911              LDR      r1,|L4.248|
0000b2  2003              MOVS     r0,#3                 ;467
                  |L4.180|
0000b4  f7fffffe          BL       Z_SendHexHeader
0000b8  e7bb              B        |L4.50|
                  |L4.186|
0000ba  4650              MOV      r0,r10                ;471
0000bc  f7fffffe          BL       Z_PutLongIntoHeader
0000c0  e7f6              B        |L4.176|
                  |L4.194|
0000c2  4651              MOV      r1,r10                ;480
0000c4  480d              LDR      r0,|L4.252|
0000c6  f7fffffe          BL       RZ_ReceiveData
0000ca  42b8              CMP      r0,r7                 ;480
0000cc  d1e6              BNE      |L4.156|
0000ce  2000              MOVS     r0,#0                 ;481
0000d0  f7fffffe          BL       Z_PutLongIntoHeader
                  |L4.212|
0000d4  4908              LDR      r1,|L4.248|
0000d6  200f              MOVS     r0,#0xf               ;482
0000d8  f7fffffe          BL       Z_SendHexHeader
0000dc  1c6d              ADDS     r5,r5,#1              ;482
0000de  2d0a              CMP      r5,#0xa               ;483
0000e0  da05              BGE      |L4.238|
0000e2  4805              LDR      r0,|L4.248|
0000e4  1f00              SUBS     r0,r0,#4              ;483
0000e6  f7fffffe          BL       Z_GetHeader
0000ea  2808              CMP      r0,#8                 ;483
0000ec  d1f2              BNE      |L4.212|
                  |L4.238|
0000ee  f7fffffe          BL       RZ_AckBibi
0000f2  200f              MOVS     r0,#0xf               ;492
0000f4  e7b9              B        |L4.106|
;;;502    
                          ENDP

0000f6  0000              DCW      0x0000
                  |L4.248|
                          DCD      ||.data||+0x24
                  |L4.252|
                          DCD      ||.bss||+0x21

                          AREA ||i.RZ_ReceiveBatch||, CODE, READONLY, ALIGN=1

                  RZ_ReceiveBatch PROC
;;;604    /*--------------------------------------------------------------------------*/
;;;605    int RZ_ReceiveBatch(BYTE *p)
000000  b510              PUSH     {r4,lr}
;;;606    { int c;
000002  4604              MOV      r4,r0
                  |L5.4|
;;;607    
;;;608      for (;;) {
;;;609        switch (c = RZ_ReceiveFile(p)) {
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       RZ_ReceiveFile
00000a  2805              CMP      r0,#5
00000c  d001              BEQ      |L5.18|
00000e  280b              CMP      r0,#0xb
000010  d107              BNE      |L5.34|
                  |L5.18|
;;;610          case ZEOF:
;;;611          case ZSKIP:
;;;612            switch (RZ_InitReceiver()) {
000012  f7fffffe          BL       RZ_InitReceiver
000016  2804              CMP      r0,#4
000018  d0f4              BEQ      |L5.4|
00001a  280f              CMP      r0,#0xf
00001c  d002              BEQ      |L5.36|
;;;613              case ZCOMPL:   return ZZOK;
;;;614              case ZFILE:    break;
;;;615              default:       return ZZERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L5.34|
;;;616              }
;;;617            break;
;;;618          default: return c;
;;;619          }
;;;620        }
;;;621    }
000022  bd10              POP      {r4,pc}
                  |L5.36|
000024  2000              MOVS     r0,#0                 ;613
000026  bd10              POP      {r4,pc}
;;;622    
                          ENDP


                          AREA ||i.RZ_ReceiveData||, CODE, READONLY, ALIGN=2

                  RZ_ReceiveData PROC
;;;384    /*--------------------------------------------------------------------------*/
;;;385    int RZ_ReceiveData(BYTE *buf,int length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;386    { int c,d; WORD crc;
;;;387    
;;;388      crc   = RxCount   = 0;
000004  4e25              LDR      r6,|L6.156|
000006  2700              MOVS     r7,#0
000008  460d              MOV      r5,r1                 ;386
00000a  4604              MOV      r4,r0                 ;386
;;;389      for (;;) {
;;;390        if ((c = Z_GetZDL()) & ~0xff) {
;;;391    CRCfoo:
;;;392          switch (c) {
;;;393            case GOTCRCE:
;;;394            case GOTCRCG:
;;;395            case GOTCRCQ:
;;;396            case GOTCRCW: // C R C s
;;;397              crc = Z_UpdateCRC(((d=c)&0xff), crc);
;;;398              if ((c=Z_GetZDL()) & ~0xff) goto CRCfoo;
;;;399    
;;;400              crc = Z_UpdateCRC(c, crc);
;;;401              if ((c=Z_GetZDL()) & ~0xff) goto CRCfoo;
;;;402    
;;;403              crc = Z_UpdateCRC(c, crc);
;;;404              if (crc & 0xffff) return ZZERROR;     //CRC error             //CRC??
00000c  f04f38ff          MOV      r8,#0xffffffff
000010  61f7              STR      r7,[r6,#0x1c]  ; RxCount
                  |L6.18|
000012  f7fffffe          BL       Z_GetZDL
000016  0a01              LSRS     r1,r0,#8              ;390
000018  d032              BEQ      |L6.128|
00001a  f44f74b4          MOV      r4,#0x168             ;392
                  |L6.30|
00001e  42a0              CMP      r0,r4                 ;392
000020  d014              BEQ      |L6.76|
000022  dc0b              BGT      |L6.60|
000024  f1100f03          CMN      r0,#3                 ;392
000028  d006              BEQ      |L6.56|
00002a  f1100f02          CMN      r0,#2                 ;392
00002e  d003              BEQ      |L6.56|
000030  f5b07f8c          CMP      r0,#0x118             ;392
000034  d100              BNE      |L6.56|
;;;405              return d;
;;;406            case GOTCAN:    return ZCAN;    //Cancel                        //??
000036  2010              MOVS     r0,#0x10
                  |L6.56|
;;;407            case ZZTIMEOUT: return c;       //Timeout                       //????
;;;408            case ZZRCDO:    return c;       //No Carrier                    //????
;;;409            default:        return c;       //Something bizarre             //???
;;;410            }
;;;411          }
;;;412        if (--length < 0) return ZZERROR;   //Long pkt                      //……
;;;413        ++RxCount;
;;;414        *buf++ = c;
;;;415        crc = Z_UpdateCRC(c, crc);
;;;416        continue;
;;;417        }
;;;418    }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L6.60|
00003c  f5a07180          SUB      r1,r0,#0x100          ;392
000040  3969              SUBS     r1,r1,#0x69           ;392
000042  d003              BEQ      |L6.76|
000044  2901              CMP      r1,#1                 ;392
000046  d001              BEQ      |L6.76|
000048  2902              CMP      r1,#2                 ;392
00004a  d1f5              BNE      |L6.56|
                  |L6.76|
00004c  4605              MOV      r5,r0                 ;397
00004e  b2c0              UXTB     r0,r0                 ;397
000050  4639              MOV      r1,r7                 ;397
000052  f7fffffe          BL       Z_UpdateCRC
000056  4607              MOV      r7,r0                 ;397
000058  f7fffffe          BL       Z_GetZDL
00005c  0a01              LSRS     r1,r0,#8              ;398
00005e  d1de              BNE      |L6.30|
000060  4639              MOV      r1,r7                 ;400
000062  f7fffffe          BL       Z_UpdateCRC
000066  4607              MOV      r7,r0                 ;400
000068  f7fffffe          BL       Z_GetZDL
00006c  0a01              LSRS     r1,r0,#8              ;401
00006e  d1d6              BNE      |L6.30|
000070  4639              MOV      r1,r7                 ;403
000072  f7fffffe          BL       Z_UpdateCRC
000076  0400              LSLS     r0,r0,#16             ;404
000078  0c00              LSRS     r0,r0,#16             ;404
00007a  d103              BNE      |L6.132|
00007c  4628              MOV      r0,r5                 ;405
00007e  e7db              B        |L6.56|
                  |L6.128|
000080  1e6d              SUBS     r5,r5,#1
000082  d501              BPL      |L6.136|
                  |L6.132|
000084  4640              MOV      r0,r8                 ;412
000086  e7d7              B        |L6.56|
                  |L6.136|
000088  69f1              LDR      r1,[r6,#0x1c]         ;413  ; RxCount
00008a  1c49              ADDS     r1,r1,#1              ;413
00008c  61f1              STR      r1,[r6,#0x1c]         ;414  ; RxCount
00008e  f8040b01          STRB     r0,[r4],#1            ;414
000092  4639              MOV      r1,r7                 ;415
000094  f7fffffe          BL       Z_UpdateCRC
000098  4607              MOV      r7,r0                 ;415
00009a  e7ba              B        |L6.18|
;;;419    
                          ENDP

                  |L6.156|
                          DCD      ||.data||

                          AREA ||i.RZ_ReceiveFile||, CODE, READONLY, ALIGN=2

                  RZ_ReceiveFile PROC
;;;534    /*--------------------------------------------------------------------------*/
;;;535    int RZ_ReceiveFile(BYTE *p)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;536    { int c,n;
;;;537    
;;;538      n        = 10;        //retry times;
;;;539      rxbytes  = 0L;
000004  4d41              LDR      r5,|L7.268|
000006  240a              MOVS     r4,#0xa               ;538
000008  2000              MOVS     r0,#0
;;;540    
;;;541      for (;;) {
;;;542        Z_PutLongIntoHeader(rxbytes);
;;;543        Z_SendHexHeader(ZRPOS, Txhdr);
;;;544    NxtHdr:
;;;545        switch (c = Z_GetHeader(Rxhdr)) {
00000a  f06f0901          MVN      r9,#1
00000e  f04f38ff          MOV      r8,#0xffffffff
;;;546    	case ZDATA: // Data Packet
;;;547    		  if (Rxpos != rxbytes) {
;;;548              if ( --n < 0) return ZZERROR;
;;;549              continue;
;;;550              }
;;;551    MoreData:
;;;552            switch (c = RZ_ReceiveData(FileBuf+rxbytes,WAZOOMAX)) {
000012  f44f5700          MOV      r7,#0x2000
000016  62e8              STR      r0,[r5,#0x2c]  ; rxbytes
                  |L7.24|
000018  6ae8              LDR      r0,[r5,#0x2c]         ;542  ; rxbytes
00001a  f7fffffe          BL       Z_PutLongIntoHeader
00001e  493b              LDR      r1,|L7.268|
000020  3124              ADDS     r1,r1,#0x24           ;543
000022  2009              MOVS     r0,#9                 ;543
000024  e045              B        |L7.178|
                  |L7.38|
000026  4839              LDR      r0,|L7.268|
000028  3020              ADDS     r0,r0,#0x20           ;545
00002a  f7fffffe          BL       Z_GetHeader
00002e  2806              CMP      r0,#6                 ;545
000030  d02d              BEQ      |L7.142|
000032  dc06              BGT      |L7.66|
000034  4548              CMP      r0,r9                 ;545
000036  d02a              BEQ      |L7.142|
000038  4540              CMP      r0,r8                 ;545
00003a  d028              BEQ      |L7.142|
00003c  2804              CMP      r0,#4                 ;545
00003e  d128              BNE      |L7.146|
000040  e05a              B        |L7.248|
                  |L7.66|
000042  280a              CMP      r0,#0xa               ;545
000044  d002              BEQ      |L7.76|
000046  280b              CMP      r0,#0xb               ;545
000048  d123              BNE      |L7.146|
00004a  e05a              B        |L7.258|
                  |L7.76|
00004c  e9d5010a          LDRD     r0,r1,[r5,#0x28]      ;545
000050  4288              CMP      r0,r1                 ;547
000052  d11c              BNE      |L7.142|
000054  f44f76b4          MOV      r6,#0x168
                  |L7.88|
000058  6ae9              LDR      r1,[r5,#0x2c]  ; rxbytes
00005a  68e8              LDR      r0,[r5,#0xc]  ; FileBuf
00005c  4408              ADD      r0,r0,r1
00005e  4639              MOV      r1,r7
000060  f7fffffe          BL       RZ_ReceiveData
000064  42b0              CMP      r0,r6
000066  d03f              BEQ      |L7.232|
000068  dc09              BGT      |L7.126|
00006a  f1100f03          CMN      r0,#3
00006e  d010              BEQ      |L7.146|
000070  4548              CMP      r0,r9
000072  d00c              BEQ      |L7.142|
000074  4540              CMP      r0,r8
000076  d00a              BEQ      |L7.142|
000078  2810              CMP      r0,#0x10
00007a  d108              BNE      |L7.142|
00007c  e009              B        |L7.146|
                  |L7.126|
00007e  f5a07080          SUB      r0,r0,#0x100
000082  3869              SUBS     r0,r0,#0x69
000084  d028              BEQ      |L7.216|
000086  2801              CMP      r0,#1
000088  d016              BEQ      |L7.184|
00008a  2802              CMP      r0,#2
00008c  d004              BEQ      |L7.152|
                  |L7.142|
00008e  1e64              SUBS     r4,r4,#1
;;;553              case ZCAN:
;;;554              case ZZRCDO:  return ZZERROR; //CAN or CARRIER
;;;555              case ZZERROR: // CRC error
;;;556                if (--n<0) return ZZERROR;
;;;557                continue;
;;;558              case ZZTIMEOUT: //Timeout
;;;559                if (--n<0) return ZZERROR;
;;;560                continue;
;;;561              case GOTCRCW: // End of frame
;;;562                n = 10;
;;;563                if (RZ_SaveToDisk(&rxbytes) == ZZERROR) return ZZERROR;
;;;564                Z_PutLongIntoHeader(rxbytes);
;;;565                Z_SendHexHeader(ZACK, Txhdr);
;;;566                goto NxtHdr;
;;;567              case GOTCRCQ: // Zack expected
;;;568                n = 10;
;;;569                if (RZ_SaveToDisk(&rxbytes) == ZZERROR) return ZZERROR;
;;;570                Z_PutLongIntoHeader(rxbytes);
;;;571                Z_SendHexHeader(ZACK, Txhdr);
;;;572                goto MoreData;
;;;573              case GOTCRCG: // Non-stop
;;;574                n = 10;
;;;575                if (RZ_SaveToDisk(&rxbytes) == ZZERROR) return ZZERROR;
;;;576                goto MoreData;
;;;577              case GOTCRCE: // Header to follow
;;;578                n = 10;
;;;579                if (RZ_SaveToDisk(&rxbytes) == ZZERROR) return ZZERROR;
;;;580                goto NxtHdr;
;;;581              }
;;;582          case ZNAK:
;;;583          case ZZTIMEOUT: // Packed was probably garbled
;;;584            if ( --n < 0) return ZZERROR;
;;;585            continue;
;;;586          case ZFILE: // Sender didn't see our ZRPOS yet
;;;587            RZ_ReceiveData(Recbuf, WAZOOMAX);
;;;588            continue;
;;;589          case ZEOF: // End of the file
;;;590            if (Rxpos != rxbytes) continue;
;;;591            return c;
;;;592          case ZZERROR: // Too much garbage in header search error
;;;593            if ( --n < 0) return ZZERROR;
000090  d5c2              BPL      |L7.24|
                  |L7.146|
;;;594            continue;
;;;595    
;;;596          default: return ZZERROR;
000092  4640              MOV      r0,r8
                  |L7.148|
;;;597          }
;;;598        }
;;;599    }
000094  e8bd87f0          POP      {r4-r10,pc}
                  |L7.152|
000098  481c              LDR      r0,|L7.268|
00009a  240a              MOVS     r4,#0xa               ;562
00009c  302c              ADDS     r0,r0,#0x2c           ;563
00009e  f7fffffe          BL       RZ_SaveToDisk
0000a2  1c40              ADDS     r0,r0,#1              ;563
0000a4  d0f5              BEQ      |L7.146|
0000a6  6ae8              LDR      r0,[r5,#0x2c]         ;564  ; rxbytes
0000a8  f7fffffe          BL       Z_PutLongIntoHeader
0000ac  4917              LDR      r1,|L7.268|
0000ae  2003              MOVS     r0,#3                 ;565
0000b0  3124              ADDS     r1,r1,#0x24           ;565
                  |L7.178|
0000b2  f7fffffe          BL       Z_SendHexHeader
0000b6  e7b6              B        |L7.38|
                  |L7.184|
0000b8  4814              LDR      r0,|L7.268|
0000ba  240a              MOVS     r4,#0xa               ;568
0000bc  302c              ADDS     r0,r0,#0x2c           ;569
0000be  f7fffffe          BL       RZ_SaveToDisk
0000c2  1c40              ADDS     r0,r0,#1              ;569
0000c4  d0e5              BEQ      |L7.146|
0000c6  6ae8              LDR      r0,[r5,#0x2c]         ;570  ; rxbytes
0000c8  f7fffffe          BL       Z_PutLongIntoHeader
0000cc  490f              LDR      r1,|L7.268|
0000ce  2003              MOVS     r0,#3                 ;571
0000d0  3124              ADDS     r1,r1,#0x24           ;571
0000d2  f7fffffe          BL       Z_SendHexHeader
0000d6  e7bf              B        |L7.88|
                  |L7.216|
0000d8  480c              LDR      r0,|L7.268|
0000da  240a              MOVS     r4,#0xa               ;574
0000dc  302c              ADDS     r0,r0,#0x2c           ;575
0000de  f7fffffe          BL       RZ_SaveToDisk
0000e2  1c40              ADDS     r0,r0,#1              ;575
0000e4  d1b8              BNE      |L7.88|
0000e6  e7d4              B        |L7.146|
                  |L7.232|
0000e8  4808              LDR      r0,|L7.268|
0000ea  240a              MOVS     r4,#0xa               ;578
0000ec  302c              ADDS     r0,r0,#0x2c           ;579
0000ee  f7fffffe          BL       RZ_SaveToDisk
0000f2  1c40              ADDS     r0,r0,#1              ;579
0000f4  d197              BNE      |L7.38|
0000f6  e7cc              B        |L7.146|
                  |L7.248|
0000f8  4639              MOV      r1,r7                 ;587
0000fa  4805              LDR      r0,|L7.272|
0000fc  f7fffffe          BL       RZ_ReceiveData
000100  e78a              B        |L7.24|
                  |L7.258|
000102  e9d5120a          LDRD     r1,r2,[r5,#0x28]      ;588
000106  4291              CMP      r1,r2                 ;590
000108  d186              BNE      |L7.24|
00010a  e7c3              B        |L7.148|
;;;600    
                          ENDP

                  |L7.268|
                          DCD      ||.data||
                  |L7.272|
                          DCD      ||.bss||+0x21

                          AREA ||i.RZ_SaveToDisk||, CODE, READONLY, ALIGN=2

                  RZ_SaveToDisk PROC
;;;524    //Program Flash  address=base+ *prxbytes; cnt=RxCount;
;;;525    int RZ_SaveToDisk(DWORD *prxbytes)
000000  4a03              LDR      r2,|L8.16|
;;;526    {
;;;527      *prxbytes += RxCount;
000002  6801              LDR      r1,[r0,#0]
000004  69d2              LDR      r2,[r2,#0x1c]  ; RxCount
000006  4411              ADD      r1,r1,r2
;;;528      return ZZOK;
000008  6001              STR      r1,[r0,#0]
00000a  2000              MOVS     r0,#0
;;;529    }
00000c  4770              BX       lr
;;;530    
                          ENDP

00000e  0000              DCW      0x0000
                  |L8.16|
                          DCD      ||.data||

                          AREA ||i.ZS_EndSend||, CODE, READONLY, ALIGN=2

                  ZS_EndSend PROC
;;;1104   /*--------------------------------------------------------------------------*/
;;;1105   void ZS_EndSend()
000000  b570              PUSH     {r4-r6,lr}
;;;1106   {
;;;1107   	while(1)
;;;1108   	{
;;;1109   		Z_PutLongIntoHeader(0L);
;;;1110   		ZS_SendBinaryHeader(ZFIN, Txhdr);
;;;1111   
;;;1112   		switch (Z_GetHeader(Rxhdr))
000002  f06f0402          MVN      r4,#2
000006  1065              ASRS     r5,r4,#1
                  |L9.8|
000008  2000              MOVS     r0,#0                 ;1109
00000a  f7fffffe          BL       Z_PutLongIntoHeader
00000e  490c              LDR      r1,|L9.64|
000010  2008              MOVS     r0,#8                 ;1110
000012  f7fffffe          BL       ZS_SendBinaryHeader
000016  480a              LDR      r0,|L9.64|
000018  1f00              SUBS     r0,r0,#4
00001a  f7fffffe          BL       Z_GetHeader
00001e  42a0              CMP      r0,r4
000020  d005              BEQ      |L9.46|
000022  42a8              CMP      r0,r5
000024  d003              BEQ      |L9.46|
000026  2808              CMP      r0,#8
000028  d002              BEQ      |L9.48|
00002a  2810              CMP      r0,#0x10
00002c  d1ec              BNE      |L9.8|
                  |L9.46|
;;;1113   		{
;;;1114   			case ZFIN:		/*-----------------------------------------*/
;;;1115   							/*                                         */
;;;1116   							/*-----------------------------------------*/
;;;1117   				SENDBYTE('O');
;;;1118   				SENDBYTE('O');
;;;1119   			case ZCAN:
;;;1120   			case ZZRCDO:
;;;1121   			case ZZTIMEOUT:	/*-----------------------------------------*/
;;;1122   							/*                                         */
;;;1123   							/*-----------------------------------------*/
;;;1124   				 return;
;;;1125   		}
;;;1126   	}
;;;1127   }
00002e  bd70              POP      {r4-r6,pc}
                  |L9.48|
000030  204f              MOVS     r0,#0x4f              ;1117
000032  f7fffffe          BL       zmputchar
000036  e8bd4070          POP      {r4-r6,lr}            ;1118
00003a  204f              MOVS     r0,#0x4f              ;1118
00003c  f7ffbffe          B.W      zmputchar
;;;1128   
                          ENDP

                  |L9.64|
                          DCD      ||.data||+0x24

                          AREA ||i.ZS_GetReceiverInfo||, CODE, READONLY, ALIGN=2

                  ZS_GetReceiverInfo PROC
;;;745    /*--------------------------------------------------------------------------*/
;;;746    int ZS_GetReceiverInfo()
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;747    {
;;;748    	int   n;
;;;749    
;;;750    	for (n=10; --n>=0; )
;;;751    	{
;;;752    		switch ( Z_GetHeader(Rxhdr) )
;;;753    		{
;;;754    			case ZCHALLENGE:	/*--------------------------------------*/
;;;755    								/* Echo receiver's challenge number     */
;;;756    								/*--------------------------------------*/
;;;757    				Z_PutLongIntoHeader(Rxpos);
000004  4d1f              LDR      r5,|L10.132|
000006  240a              MOVS     r4,#0xa               ;750
;;;758    				Z_SendHexHeader(ZACK, Txhdr);
;;;759    				continue;
;;;760    			case ZCOMMAND:		/*--------------------------------------*/
;;;761    								/* They didn't see our ZRQINIT          */
;;;762    								/*--------------------------------------*/
;;;763    				Z_PutLongIntoHeader(0L);
;;;764    				Z_SendHexHeader(ZRQINIT, Txhdr);
;;;765    				continue;
;;;766    			case ZRINIT:		/*--------------------------------------*/
;;;767    								/*                                      */
;;;768    								/*--------------------------------------*/
;;;769    				Rxbuflen = ((WORD)Rxhdr[ZP1]<<8)|Rxhdr[ZP0];
;;;770    				return ZZOK;
;;;771    			case ZCAN:
;;;772    			case ZZRCDO:
;;;773    			case ZZTIMEOUT:		/*--------------------------------------*/
;;;774    								/*                                      */
;;;775    								/*--------------------------------------*/
;;;776    				return ZZERROR;
000008  f04f39ff          MOV      r9,#0xffffffff
00000c  f1050620          ADD      r6,r5,#0x20           ;752
000010  f06f0702          MVN      r7,#2                 ;752
000014  f06f0801          MVN      r8,#1                 ;752
000018  e02f              B        |L10.122|
                  |L10.26|
00001a  481a              LDR      r0,|L10.132|
00001c  3020              ADDS     r0,r0,#0x20           ;752
00001e  f7fffffe          BL       Z_GetHeader
000022  2801              CMP      r0,#1                 ;752
000024  d01d              BEQ      |L10.98|
000026  dc05              BGT      |L10.52|
000028  42b8              CMP      r0,r7                 ;752
00002a  d028              BEQ      |L10.126|
00002c  4540              CMP      r0,r8                 ;752
00002e  d026              BEQ      |L10.126|
000030  b9f8              CBNZ     r0,|L10.114|
000032  e01b              B        |L10.108|
                  |L10.52|
000034  280e              CMP      r0,#0xe               ;752
000036  d004              BEQ      |L10.66|
000038  2810              CMP      r0,#0x10              ;752
00003a  d020              BEQ      |L10.126|
00003c  2812              CMP      r0,#0x12              ;752
00003e  d118              BNE      |L10.114|
000040  e006              B        |L10.80|
                  |L10.66|
000042  6aa8              LDR      r0,[r5,#0x28]         ;757  ; Rxpos
000044  f7fffffe          BL       Z_PutLongIntoHeader
000048  490e              LDR      r1,|L10.132|
00004a  3124              ADDS     r1,r1,#0x24           ;758
00004c  2003              MOVS     r0,#3                 ;758
00004e  e005              B        |L10.92|
                  |L10.80|
000050  2000              MOVS     r0,#0                 ;763
000052  f7fffffe          BL       Z_PutLongIntoHeader
000056  490b              LDR      r1,|L10.132|
000058  2000              MOVS     r0,#0                 ;764
00005a  3124              ADDS     r1,r1,#0x24           ;764
                  |L10.92|
00005c  f7fffffe          BL       Z_SendHexHeader
000060  e00b              B        |L10.122|
                  |L10.98|
000062  8830              LDRH     r0,[r6,#0]            ;769  ; Rxhdr
000064  6068              STR      r0,[r5,#4]            ;770  ; Rxbuflen
000066  2000              MOVS     r0,#0                 ;770
                  |L10.104|
;;;777    			case ZRQINIT:		/*--------------------------------------*/
;;;778    								/*                                      */
;;;779    								/*--------------------------------------*/
;;;780    				if (Rxhdr[ZF0] == ZCOMMAND) continue;
;;;781    			default:			/*--------------------------------------*/
;;;782    								/*                                      */
;;;783    								/*--------------------------------------*/
;;;784    				Z_SendHexHeader(ZNAK, Txhdr);
;;;785    				continue;
;;;786    		}
;;;787    	}
;;;788    	return ZZERROR;
;;;789    }
000068  e8bd87f0          POP      {r4-r10,pc}
                  |L10.108|
00006c  78f0              LDRB     r0,[r6,#3]            ;780  ; Rxhdr
00006e  2812              CMP      r0,#0x12              ;780
000070  d003              BEQ      |L10.122|
                  |L10.114|
000072  4904              LDR      r1,|L10.132|
000074  3124              ADDS     r1,r1,#0x24           ;784
000076  2006              MOVS     r0,#6                 ;784
000078  e7f0              B        |L10.92|
                  |L10.122|
00007a  1e64              SUBS     r4,r4,#1              ;785
00007c  d5cd              BPL      |L10.26|
                  |L10.126|
00007e  4648              MOV      r0,r9                 ;788
000080  e7f2              B        |L10.104|
;;;790    
                          ENDP

000082  0000              DCW      0x0000
                  |L10.132|
                          DCD      ||.data||

                          AREA ||i.ZS_SendBinaryHeader||, CODE, READONLY, ALIGN=1

                  ZS_SendBinaryHeader PROC
;;;715    /*--------------------------------------------------------------------------*/
;;;716    void ZS_SendBinaryHeader(int type, char *hdr)
000000  b570              PUSH     {r4-r6,lr}
;;;717    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;718    	char *hptr;
;;;719    	WORD crc;
;;;720    	int  n;
;;;721    
;;;722    	SENDBYTE(ZPAD);
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       zmputchar
;;;723    	SENDBYTE(ZDLE);
00000c  2018              MOVS     r0,#0x18
00000e  f7fffffe          BL       zmputchar
;;;724    	SENDBYTE(ZBIN);
000012  2041              MOVS     r0,#0x41
000014  f7fffffe          BL       zmputchar
;;;725    	ZS_SendByte(type);
000018  b2e8              UXTB     r0,r5
00001a  f7fffffe          BL       ZS_SendByte
;;;726    
;;;727    	crc = Z_UpdateCRC(type, 0);
00001e  2100              MOVS     r1,#0
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       Z_UpdateCRC
000026  4606              MOV      r6,r0
;;;728    
;;;729    	hptr  = hdr;
;;;730    	for (n=4; --n >= 0;)
000028  2504              MOVS     r5,#4
00002a  e008              B        |L11.62|
                  |L11.44|
;;;731    	{
;;;732    		ZS_SendByte(*hptr);
00002c  7820              LDRB     r0,[r4,#0]
00002e  f7fffffe          BL       ZS_SendByte
;;;733    		crc = Z_UpdateCRC(((unsigned short)(*hptr++)), crc);
000032  f8140b01          LDRB     r0,[r4],#1
000036  4631              MOV      r1,r6
000038  f7fffffe          BL       Z_UpdateCRC
00003c  4606              MOV      r6,r0
                  |L11.62|
00003e  1e6d              SUBS     r5,r5,#1
000040  d5f4              BPL      |L11.44|
;;;734    	}
;;;735    
;;;736    	crc = Z_UpdateCRC(0,crc);
000042  4601              MOV      r1,r0
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       Z_UpdateCRC
00004a  4601              MOV      r1,r0
;;;737    	crc = Z_UpdateCRC(0,crc);
00004c  2000              MOVS     r0,#0
00004e  f7fffffe          BL       Z_UpdateCRC
000052  4604              MOV      r4,r0
;;;738    	ZS_SendByte(crc>>8);
000054  f3c02007          UBFX     r0,r0,#8,#8
000058  f7fffffe          BL       ZS_SendByte
;;;739    	ZS_SendByte(crc);
00005c  b2e0              UXTB     r0,r4
00005e  e8bd4070          POP      {r4-r6,lr}
000062  f7ffbffe          B.W      ZS_SendByte
;;;740    }
;;;741    
                          ENDP


                          AREA ||i.ZS_SendByte||, CODE, READONLY, ALIGN=2

                  ZS_SendByte PROC
;;;681    /*--------------------------------------------------------------------------*/
;;;682    void ZS_SendByte(BYTE c)
000000  b570              PUSH     {r4-r6,lr}
;;;683    {
;;;684    	static BYTE lastsent;
;;;685    
;;;686    	switch (c)
;;;687    	{
;;;688    		case 015:
;;;689    		case 0215:  /*--------------------------------------------------*/
;;;690    					/*                                                  */
;;;691    					/*--------------------------------------------------*/
;;;692    			if ((lastsent & 0x7F) != '@') goto SendIt;
000002  4d13              LDR      r5,|L12.80|
000004  4604              MOV      r4,r0                 ;683
000006  2818              CMP      r0,#0x18              ;686
000008  d017              BEQ      |L12.58|
00000a  dc08              BGT      |L12.30|
00000c  2c0d              CMP      r4,#0xd               ;686
00000e  d00f              BEQ      |L12.48|
000010  2c10              CMP      r4,#0x10              ;686
000012  d012              BEQ      |L12.58|
000014  2c11              CMP      r4,#0x11              ;686
000016  d010              BEQ      |L12.58|
000018  2c13              CMP      r4,#0x13              ;686
00001a  d113              BNE      |L12.68|
00001c  e00d              B        |L12.58|
                  |L12.30|
00001e  2c8d              CMP      r4,#0x8d              ;686
000020  d006              BEQ      |L12.48|
000022  2c90              CMP      r4,#0x90              ;686
000024  d009              BEQ      |L12.58|
000026  2c91              CMP      r4,#0x91              ;686
000028  d007              BEQ      |L12.58|
00002a  2c93              CMP      r4,#0x93              ;686
00002c  d10a              BNE      |L12.68|
00002e  e004              B        |L12.58|
                  |L12.48|
000030  7868              LDRB     r0,[r5,#1]  ; lastsent
000032  f000007f          AND      r0,r0,#0x7f
000036  2840              CMP      r0,#0x40
000038  d104              BNE      |L12.68|
                  |L12.58|
;;;693    		case 020:
;;;694    		case 021:
;;;695    		case 023:
;;;696    		case 0220:
;;;697    		case 0221:
;;;698    		case 0223:
;;;699    		case ZDLE:  /*--------------------------------------------------*/
;;;700    					/* Quoted characters                                */
;;;701    					/*--------------------------------------------------*/
;;;702    			SENDBYTE(ZDLE);
00003a  2018              MOVS     r0,#0x18
00003c  f7fffffe          BL       zmputchar
;;;703    			c ^= 0x40;
000040  f0840440          EOR      r4,r4,#0x40
                  |L12.68|
;;;704    
;;;705    		default:    /*--------------------------------------------------*/
;;;706    					/* Normal character output                          */
;;;707    SendIt:				/*--------------------------------------------------*/
;;;708    			SENDBYTE(lastsent = c);
000044  706c              STRB     r4,[r5,#1]
000046  4620              MOV      r0,r4
000048  e8bd4070          POP      {r4-r6,lr}
00004c  f7ffbffe          B.W      zmputchar
;;;709    	}
;;;710    }
;;;711    
                          ENDP

                  |L12.80|
                          DCD      ||.data||

                          AREA ||i.ZS_SendData||, CODE, READONLY, ALIGN=1

                  ZS_SendData PROC
;;;794    /*--------------------------------------------------------------------------*/
;;;795    void ZS_SendData(DWORD pos, DWORD end, unsigned short frameend)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;796    {
000004  4690              MOV      r8,r2
000006  460e              MOV      r6,r1
000008  4604              MOV      r4,r0
;;;797    	WORD crc;
;;;798    	//unsigned char *data = "hello world";
;;;799    	crc = 0;
00000a  2500              MOVS     r5,#0
00000c  e00b              B        |L13.38|
                  |L13.14|
;;;800    	
;;;801    	
;;;802    	while (pos < end)
;;;803    	{
;;;804    		BYTE b = OneSramByte(pos++);//ÔÝÍ£Ò»ÏÂ
00000e  4620              MOV      r0,r4
000010  1c64              ADDS     r4,r4,#1
000012  f7fffffe          BL       OneSramByte
000016  4607              MOV      r7,r0
;;;805    		ZS_SendByte(b);
000018  f7fffffe          BL       ZS_SendByte
;;;806    		crc = Z_UpdateCRC(((unsigned short)b), crc);
00001c  4629              MOV      r1,r5
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       Z_UpdateCRC
000024  4605              MOV      r5,r0
                  |L13.38|
000026  42b4              CMP      r4,r6                 ;802
000028  dbf1              BLT      |L13.14|
;;;807    	}
;;;808    	/*
;;;809    	while(*data)//pos < end
;;;810    	{
;;;811    		ZS_SendByte(*data);
;;;812    		crc = Z_UpdateCRC(((unsigned short)data), crc);
;;;813    		if (*data) ;
;;;814    		else break;
;;;815    		data++;
;;;816    	}*/
;;;817    //	frameend = ZCRCE;//chuck×Ô¼ºÔö¼Ó
;;;818    	SENDBYTE(ZDLE);
00002a  2018              MOVS     r0,#0x18
00002c  f7fffffe          BL       zmputchar
;;;819    	SENDBYTE(frameend);
000030  f00800ff          AND      r0,r8,#0xff
000034  f7fffffe          BL       zmputchar
;;;820    	crc = Z_UpdateCRC(frameend, crc);
000038  4629              MOV      r1,r5
00003a  4640              MOV      r0,r8
00003c  f7fffffe          BL       Z_UpdateCRC
000040  4601              MOV      r1,r0
;;;821    
;;;822    	crc = Z_UpdateCRC(0,crc);
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       Z_UpdateCRC
000048  4601              MOV      r1,r0
;;;823    	crc = Z_UpdateCRC(0,crc);
00004a  2000              MOVS     r0,#0
00004c  f7fffffe          BL       Z_UpdateCRC
000050  4604              MOV      r4,r0
;;;824    	ZS_SendByte(crc>>8);
000052  f3c02007          UBFX     r0,r0,#8,#8
000056  f7fffffe          BL       ZS_SendByte
;;;825    	ZS_SendByte(crc);
00005a  b2e0              UXTB     r0,r4
00005c  e8bd41f0          POP      {r4-r8,lr}
000060  f7ffbffe          B.W      ZS_SendByte
;;;826    }
;;;827    
                          ENDP


                          AREA ||i.ZS_SendFile||, CODE, READONLY, ALIGN=2

                  ZS_SendFile PROC
;;;1054   /*--------------------------------------------------------------------------*/
;;;1055   int ZS_SendFile(BYTE *name, int numK)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1056   {	int c;
000004  2600              MOVS     r6,#0
;;;1057   
;;;1058   	for (;;)
;;;1059   	{
;;;1060   		Txhdr[ZF0] = LZCONV;    /* Default file conversion mode */
000006  4f1c              LDR      r7,|L14.120|
;;;1061   		Txhdr[ZF1] = LZMANAG;   /* Default file management mode */
;;;1062   		Txhdr[ZF2] = LZTRANS;   /* Default file transport mode */
;;;1063   		Txhdr[ZF3] = 0;
;;;1064   		ZS_SendBinaryHeader(ZFILE, Txhdr);
;;;1065   		ZS_SendFileName(name, numK);//µ½Õâ±ß¶¼Ã»ÓÐÎÊÌâ
;;;1066   
;;;1067   Again:
;;;1068   		switch (c = Z_GetHeader(Rxhdr))
000008  1ef4              SUBS     r4,r6,#3
00000a  4688              MOV      r8,r1                 ;1056
00000c  4681              MOV      r9,r0                 ;1056
00000e  1065              ASRS     r5,r4,#1
                  |L14.16|
000010  70fe              STRB     r6,[r7,#3]            ;1060
000012  70be              STRB     r6,[r7,#2]            ;1061
000014  707e              STRB     r6,[r7,#1]            ;1062
000016  703e              STRB     r6,[r7,#0]            ;1063
000018  4917              LDR      r1,|L14.120|
00001a  2004              MOVS     r0,#4                 ;1064
00001c  f7fffffe          BL       ZS_SendBinaryHeader
000020  4641              MOV      r1,r8                 ;1065
000022  4648              MOV      r0,r9                 ;1065
000024  f7fffffe          BL       ZS_SendFileName
                  |L14.40|
000028  4813              LDR      r0,|L14.120|
00002a  1f00              SUBS     r0,r0,#4
00002c  f7fffffe          BL       Z_GetHeader
000030  2807              CMP      r0,#7
000032  d012              BEQ      |L14.90|
000034  dc09              BGT      |L14.74|
000036  42a0              CMP      r0,r4
000038  d00f              BEQ      |L14.90|
00003a  42a8              CMP      r0,r5
00003c  d00d              BEQ      |L14.90|
00003e  2801              CMP      r0,#1
000040  d0f2              BEQ      |L14.40|
000042  2805              CMP      r0,#5
000044  d1e4              BNE      |L14.16|
                  |L14.70|
;;;1069   		{
;;;1070   			case ZRINIT:	/*-----------------------------------------*/
;;;1071   							/*                                         */
;;;1072   							/*-----------------------------------------*/
;;;1073   				goto Again;
;;;1074   
;;;1075   			case ZCAN:     
;;;1076   			case ZCRC:     
;;;1077   			case ZZRCDO:     
;;;1078   			case ZZTIMEOUT:  
;;;1079   			case ZFIN:
;;;1080   			case ZABORT:   
;;;1081   							/*-----------------------------------------*/
;;;1082   							/*                                         */
;;;1083   							/*-----------------------------------------*/
;;;1084   				return ZZERROR;
;;;1085      
;;;1086   			case ZSKIP:	    /*-----------------------------------------*/
;;;1087   							/* Other system wants to skip this file    */
;;;1088   							/*-----------------------------------------*/
;;;1089   				 return c;
;;;1090      
;;;1091   			case ZRPOS:	    /*-----------------------------------------*/
;;;1092   							/* Resend from this position...            */
;;;1093   							/*-----------------------------------------*/
;;;1094   				Txpos = Rxpos;				//ÎÄ¼þ´«ÊäµÄ·½Î»ÎªZRPOS·µ»ØµÄÊýÖµ
;;;1095   		//		return ZS_SendFileData(numK * 1024L, 1024);//Ä¬ÈÏ
;;;1096   			return ZS_SendFileData(numK  , 1024);//£¨end£¬blk£© ÎÒÐÞ¸ÄµÄ
;;;1097   		}
;;;1098   	}
;;;1099   }
000046  e8bd87f0          POP      {r4-r10,pc}
                  |L14.74|
00004a  2808              CMP      r0,#8                 ;1068
00004c  d005              BEQ      |L14.90|
00004e  2809              CMP      r0,#9                 ;1068
000050  d006              BEQ      |L14.96|
000052  280d              CMP      r0,#0xd               ;1068
000054  d001              BEQ      |L14.90|
000056  2810              CMP      r0,#0x10              ;1068
000058  d1da              BNE      |L14.16|
                  |L14.90|
00005a  f04f30ff          MOV      r0,#0xffffffff        ;1084
00005e  e7f2              B        |L14.70|
                  |L14.96|
000060  4805              LDR      r0,|L14.120|
000062  3824              SUBS     r0,r0,#0x24           ;1094
000064  6a81              LDR      r1,[r0,#0x28]         ;1094  ; Rxpos
000066  6341              STR      r1,[r0,#0x34]         ;1096  ; Txpos
000068  4640              MOV      r0,r8                 ;1096
00006a  e8bd47f0          POP      {r4-r10,lr}           ;1096
00006e  f44f6180          MOV      r1,#0x400             ;1096
000072  f7ffbffe          B.W      ZS_SendFileData
;;;1100   
                          ENDP

000076  0000              DCW      0x0000
                  |L14.120|
                          DCD      ||.data||+0x24

                          AREA ||i.ZS_SendFileData||, CODE, READONLY, ALIGN=2

                  ZS_SendFileData PROC
;;;936    --------------------------------------------------------------------------*/
;;;937    int ZS_SendFileData(DWORD end, int blk)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;938    {
;;;939    	int c, e;
;;;940    //	int newcnt, 
;;;941    	int blklen, maxblklen;
;;;942    
;;;943    	if (Rxbuflen && (blk > Rxbuflen)) maxblklen = Rxbuflen;
000004  4a29              LDR      r2,|L15.172|
000006  4607              MOV      r7,r0                 ;938
000008  6850              LDR      r0,[r2,#4]            ;938  ; Rxbuflen
00000a  b110              CBZ      r0,|L15.18|
00000c  4281              CMP      r1,r0
00000e  dd00              BLE      |L15.18|
000010  4601              MOV      r1,r0
                  |L15.18|
;;;944    	else maxblklen = blk;
;;;945    	blklen = maxblklen;
000012  460e              MOV      r6,r1
;;;946    	//printf("blklen = %d \n",blklen);//Õâ¸öÖµÎªblk
;;;947    	//CLK_SysTickDelay(2000);
;;;948    SomeMore:
;;;949    	if (Z_TestOneByte())
;;;950    	{
;;;951    WaitAck:
;;;952    		switch (c = ZS_SyncWithReceiver())
;;;953    		{
;;;954    			default:	/*-----------------------------------------*/
;;;955    						/*                                         */
;;;956    						/*-----------------------------------------*/
;;;957    				return ZZERROR;
000014  f04f39ff          MOV      r9,#0xffffffff
000018  4690              MOV      r8,r2                 ;943
00001a  e009              B        |L15.48|
                  |L15.28|
00001c  f7fffffe          BL       ZS_SyncWithReceiver
000020  2801              CMP      r0,#1                 ;952
000022  d03f              BEQ      |L15.164|
000024  2803              CMP      r0,#3                 ;952
000026  d003              BEQ      |L15.48|
000028  2805              CMP      r0,#5                 ;952
00002a  d137              BNE      |L15.156|
                  |L15.44|
;;;958    			case ZSKIP:	/*-----------------------------------------*/
;;;959    						/* Skip this file                          */
;;;960    						/*-----------------------------------------*/
;;;961    				return c;
;;;962    			case ZACK:	/*-----------------------------------------*/
;;;963    						/*                                         */
;;;964    						/*-----------------------------------------*/
;;;965    				break;
;;;966    			case ZRPOS:	/*-----------------------------------------*/
;;;967    						/* Resume at this position                 */
;;;968    						/*-----------------------------------------*/
;;;969    				break;
;;;970    			case ZRINIT:/*-----------------------------------------*/
;;;971    						/* Receive init                            */
;;;972    						/*-----------------------------------------*/
;;;973    				return ZZOK;
;;;974    		}
;;;975    	}
;;;976    	while (Z_TestOneByte())
;;;977    	{
;;;978    		switch (Z_GetByte(1000))
;;;979    		{
;;;980    			case CAN:
;;;981    			case ZZRCDO:
;;;982    			case ZPAD:  goto WaitAck;
;;;983    		}
;;;984    	}
;;;985    
;;;986    	Z_PutLongIntoHeader(Txpos);
;;;987    	ZS_SendBinaryHeader(ZDATA, Txhdr);
;;;988    
;;;989    	do
;;;990    	{
;;;991    		c = blklen;
;;;992    		if ((Txpos + c) > end) //ÒªÂú×ãÕâÒ»²½
;;;993    			c = end - Txpos;
;;;994    		if (c < blklen) 
;;;995    			e = ZCRCE;//ÎÒÒªÖ´ÐÐÕâÒ»²½
;;;996    //		else if (Rxbuflen && ((newcnt -= c) <= 0)) e = ZCRCW;
;;;997    		else e = ZCRCG;//'i'
;;;998    
;;;999    		ZS_SendData(Txpos, Txpos + c, e);//Txpos ³õÊ¼Î»ÖÃ Txpos+c ½áÊøÎ»ÖÃ eÀàÐÍ
;;;1000   		Txpos += c;
;;;1001   
;;;1002   		if (e == ZCRCW) goto WaitAck;
;;;1003   
;;;1004   		while (Z_TestOneByte())
;;;1005   		{
;;;1006   			switch (Z_GetByte(1000))
;;;1007   			{
;;;1008   				case CAN:
;;;1009   				case ZZRCDO:
;;;1010   				case ZPAD:  /*--------------------------------------*/
;;;1011   							/* Interruption detected;               */
;;;1012   							/* stop sending and process complaint   */
;;;1013   							/*--------------------------------------*/
;;;1014   					ZS_SendData(Txpos, Txpos, ZCRCE);//'h'
;;;1015   					goto WaitAck;
;;;1016   			}
;;;1017   		}
;;;1018   	} while (e == ZCRCG);
;;;1019   
;;;1020   	while(1)
;;;1021   	{
;;;1022   		Z_PutLongIntoHeader(Txpos);
;;;1023   		ZS_SendBinaryHeader(ZEOF, Txhdr);
;;;1024   
;;;1025   		switch (ZS_SyncWithReceiver())
;;;1026   		{
;;;1027   			case ZACK:		/*-----------------------------------------*/
;;;1028   							/*                                         */
;;;1029   							/*-----------------------------------------*/
;;;1030   				continue;
;;;1031   			case ZRPOS:		/*-----------------------------------------*/
;;;1032   							/* Resume at this position...              */
;;;1033   							/*-----------------------------------------*/
;;;1034   				goto SomeMore;
;;;1035   			case ZRINIT:	/*-----------------------------------------*/
;;;1036   							/* Receive init                            */
;;;1037   							/*-----------------------------------------*/
;;;1038   				return ZZOK;
;;;1039   			case ZSKIP:		/*-----------------------------------------*/
;;;1040   							/* Request to skip the current file        */
;;;1041   							/*-----------------------------------------*/
;;;1042   				return c;
;;;1043   			default:		/*-----------------------------------------*/
;;;1044   							/*                                         */
;;;1045   							/*-----------------------------------------*/
;;;1046   				return ZZERROR;
;;;1047   		}
;;;1048   	}
;;;1049   }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L15.48|
000030  4644              MOV      r4,r8                 ;986
000032  f8d80034          LDR      r0,[r8,#0x34]         ;986  ; Txpos
000036  f7fffffe          BL       Z_PutLongIntoHeader
00003a  491c              LDR      r1,|L15.172|
00003c  200a              MOVS     r0,#0xa               ;987
00003e  3124              ADDS     r1,r1,#0x24           ;987
000040  f7fffffe          BL       ZS_SendBinaryHeader
000044  46a0              MOV      r8,r4                 ;943
                  |L15.70|
000046  4634              MOV      r4,r6                 ;991
000048  f8d80034          LDR      r0,[r8,#0x34]         ;992  ; Txpos
00004c  1902              ADDS     r2,r0,r4              ;992
00004e  42ba              CMP      r2,r7                 ;992
000050  dd00              BLE      |L15.84|
000052  1a3c              SUBS     r4,r7,r0              ;993
                  |L15.84|
000054  42b4              CMP      r4,r6                 ;994
000056  da01              BGE      |L15.92|
000058  2568              MOVS     r5,#0x68              ;995
00005a  e000              B        |L15.94|
                  |L15.92|
00005c  2569              MOVS     r5,#0x69              ;997
                  |L15.94|
00005e  462a              MOV      r2,r5                 ;999
000060  1901              ADDS     r1,r0,r4              ;999
000062  f7fffffe          BL       ZS_SendData
000066  f8d80034          LDR      r0,[r8,#0x34]         ;1000  ; Txpos
00006a  1901              ADDS     r1,r0,r4              ;1000
00006c  4640              MOV      r0,r8                 ;1000
00006e  f8c81034          STR      r1,[r8,#0x34]         ;1002  ; Txpos
000072  2d6b              CMP      r5,#0x6b              ;1002
000074  d0d2              BEQ      |L15.28|
000076  2d69              CMP      r5,#0x69              ;1018
000078  d0e5              BEQ      |L15.70|
00007a  4605              MOV      r5,r0                 ;943
                  |L15.124|
00007c  6b68              LDR      r0,[r5,#0x34]         ;1022  ; Txpos
00007e  f7fffffe          BL       Z_PutLongIntoHeader
000082  490a              LDR      r1,|L15.172|
000084  200b              MOVS     r0,#0xb               ;1023
000086  3124              ADDS     r1,r1,#0x24           ;1023
000088  f7fffffe          BL       ZS_SendBinaryHeader
00008c  f7fffffe          BL       ZS_SyncWithReceiver
000090  2801              CMP      r0,#1                 ;1025
000092  d007              BEQ      |L15.164|
000094  2803              CMP      r0,#3                 ;1025
000096  d0f1              BEQ      |L15.124|
000098  2805              CMP      r0,#5                 ;1025
00009a  d005              BEQ      |L15.168|
                  |L15.156|
00009c  2809              CMP      r0,#9                 ;1025
00009e  d0c7              BEQ      |L15.48|
0000a0  4648              MOV      r0,r9                 ;1046
0000a2  e7c3              B        |L15.44|
                  |L15.164|
0000a4  2000              MOVS     r0,#0                 ;1038
0000a6  e7c1              B        |L15.44|
                  |L15.168|
0000a8  4620              MOV      r0,r4                 ;1042
0000aa  e7bf              B        |L15.44|
;;;1050   
                          ENDP

                  |L15.172|
                          DCD      ||.data||

                          AREA ||i.ZS_SendFileName||, CODE, READONLY, ALIGN=2

                  ZS_SendFileName PROC
;;;828    int modify = 40;
;;;829    void ZS_SendFileName(BYTE *name, int numK)//1
000000  b57f              PUSH     {r0-r6,lr}
;;;830    {
000002  4604              MOV      r4,r0
;;;831    	WORD crc = 0;
;;;832    	BYTE str[] = "00000000 000 0\0", *p;
000004  a05a              ADR      r0,|L16.368|
000006  2500              MOVS     r5,#0                 ;831
000008  c84d              LDM      r0,{r0,r2,r3,r6}
00000a  e88d004d          STM      sp,{r0,r2,r3,r6}
;;;833    	DWORD lenB = numK;//numK * 1024;//1024  Õâ¸ö²ÎÊýµÄÒâÒå£¿ ÎÄ¼þÊýÁ¿»¹ÊÇÎÄ¼þ´óÐ¡Ñ½  ÎÄ¼þ³¤¶È£¿
;;;834    
;;;835    	p = str;//ÎÄ¼þ³¤¶È 
;;;836    	while (lenB >= 100000) { lenB -= 100000; (*p)++; } if (p != str) p++; else if (*p != '0') p++;
00000e  4b5c              LDR      r3,|L16.384|
000010  4668              MOV      r0,sp                 ;835
000012  425e              RSBS     r6,r3,#0
000014  e003              B        |L16.30|
                  |L16.22|
000016  7802              LDRB     r2,[r0,#0]
000018  4419              ADD      r1,r1,r3
00001a  1c52              ADDS     r2,r2,#1
00001c  7002              STRB     r2,[r0,#0]
                  |L16.30|
00001e  42b1              CMP      r1,r6
000020  daf9              BGE      |L16.22|
000022  4603              MOV      r3,r0
000024  4298              CMP      r0,r3
000026  d102              BNE      |L16.46|
000028  7802              LDRB     r2,[r0,#0]
00002a  2a30              CMP      r2,#0x30
00002c  d000              BEQ      |L16.48|
                  |L16.46|
00002e  1c40              ADDS     r0,r0,#1
                  |L16.48|
;;;837    	while (lenB >=  10000) { lenB -=  10000; (*p)++; } if (p != str) p++; else if (*p != '0') p++;
000030  f2427610          MOV      r6,#0x2710
                  |L16.52|
000034  42b1              CMP      r1,r6
000036  db06              BLT      |L16.70|
000038  7802              LDRB     r2,[r0,#0]
00003a  f5a1511c          SUB      r1,r1,#0x2700
00003e  1c52              ADDS     r2,r2,#1
000040  7002              STRB     r2,[r0,#0]
000042  3910              SUBS     r1,r1,#0x10
000044  e7f6              B        |L16.52|
                  |L16.70|
000046  4298              CMP      r0,r3
000048  d102              BNE      |L16.80|
00004a  7802              LDRB     r2,[r0,#0]
00004c  2a30              CMP      r2,#0x30
00004e  d000              BEQ      |L16.82|
                  |L16.80|
000050  1c40              ADDS     r0,r0,#1
                  |L16.82|
;;;838    	while (lenB >=   1000) { lenB -=   1000; (*p)++; } if (p != str) p++; else if (*p != '0') p++;
000052  f44f767a          MOV      r6,#0x3e8
                  |L16.86|
000056  42b1              CMP      r1,r6
000058  db05              BLT      |L16.102|
00005a  7802              LDRB     r2,[r0,#0]
00005c  f5a1717a          SUB      r1,r1,#0x3e8
000060  1c52              ADDS     r2,r2,#1
000062  7002              STRB     r2,[r0,#0]
000064  e7f7              B        |L16.86|
                  |L16.102|
000066  4298              CMP      r0,r3
000068  d102              BNE      |L16.112|
00006a  7802              LDRB     r2,[r0,#0]
00006c  2a30              CMP      r2,#0x30
00006e  d005              BEQ      |L16.124|
                  |L16.112|
000070  1c40              ADDS     r0,r0,#1
000072  e003              B        |L16.124|
                  |L16.116|
;;;839    	while (lenB >=    100) { lenB -=    100; (*p)++; } if (p != str) p++; else if (*p != '0') p++;
000074  7802              LDRB     r2,[r0,#0]
000076  1c52              ADDS     r2,r2,#1
000078  7002              STRB     r2,[r0,#0]
00007a  3964              SUBS     r1,r1,#0x64
                  |L16.124|
00007c  2964              CMP      r1,#0x64
00007e  daf9              BGE      |L16.116|
000080  4298              CMP      r0,r3
000082  d102              BNE      |L16.138|
000084  7802              LDRB     r2,[r0,#0]
000086  2a30              CMP      r2,#0x30
000088  d005              BEQ      |L16.150|
                  |L16.138|
00008a  1c40              ADDS     r0,r0,#1
00008c  e003              B        |L16.150|
                  |L16.142|
;;;840    	while (lenB >=     10) { lenB -=     10; (*p)++; } if (p != str) p++; else if (*p != '0') p++;
00008e  7802              LDRB     r2,[r0,#0]
000090  1c52              ADDS     r2,r2,#1
000092  7002              STRB     r2,[r0,#0]
000094  390a              SUBS     r1,r1,#0xa
                  |L16.150|
000096  290a              CMP      r1,#0xa
000098  daf9              BGE      |L16.142|
00009a  4298              CMP      r0,r3
00009c  d102              BNE      |L16.164|
00009e  7802              LDRB     r2,[r0,#0]
0000a0  2a30              CMP      r2,#0x30
0000a2  d005              BEQ      |L16.176|
                  |L16.164|
0000a4  1c40              ADDS     r0,r0,#1
0000a6  e003              B        |L16.176|
                  |L16.168|
;;;841    	while (lenB >=      1) { lenB -=      1; (*p)++; } p++; *p++ = ' ';
0000a8  7802              LDRB     r2,[r0,#0]
0000aa  1c52              ADDS     r2,r2,#1
0000ac  7002              STRB     r2,[r0,#0]
0000ae  1e49              SUBS     r1,r1,#1
                  |L16.176|
0000b0  2901              CMP      r1,#1
0000b2  daf9              BGE      |L16.168|
;;;842    
;;;843    	modify++;//ÐÞ¸ÄÈÕÆÚ£¿
0000b4  4b33              LDR      r3,|L16.388|
0000b6  2220              MOVS     r2,#0x20              ;841
0000b8  7042              STRB     r2,[r0,#1]            ;841
0000ba  6899              LDR      r1,[r3,#8]  ; modify
0000bc  1c49              ADDS     r1,r1,#1
0000be  1c80              ADDS     r0,r0,#2
;;;844    	while (modify >= 100) { modify -= 100; (*p)++; }  p++;
0000c0  6099              STR      r1,[r3,#8]  ; modify
0000c2  e005              B        |L16.208|
                  |L16.196|
0000c4  3964              SUBS     r1,r1,#0x64
0000c6  6099              STR      r1,[r3,#8]  ; modify
0000c8  7801              LDRB     r1,[r0,#0]
0000ca  1c49              ADDS     r1,r1,#1
0000cc  7001              STRB     r1,[r0,#0]
0000ce  6899              LDR      r1,[r3,#8]  ; modify
                  |L16.208|
0000d0  2964              CMP      r1,#0x64
0000d2  daf7              BGE      |L16.196|
0000d4  1c40              ADDS     r0,r0,#1
;;;845    	while (modify >=  10) { modify -=  10; (*p)++; }  p++;//41
0000d6  e004              B        |L16.226|
                  |L16.216|
0000d8  390a              SUBS     r1,r1,#0xa
0000da  6099              STR      r1,[r3,#8]  ; modify
0000dc  7801              LDRB     r1,[r0,#0]
0000de  1c49              ADDS     r1,r1,#1
0000e0  7001              STRB     r1,[r0,#0]
                  |L16.226|
0000e2  6899              LDR      r1,[r3,#8]  ; modify
0000e4  290a              CMP      r1,#0xa
0000e6  daf7              BGE      |L16.216|
0000e8  1c40              ADDS     r0,r0,#1
;;;846    	while (modify >=   1) { modify -=   1; (*p)++; }  p++;
0000ea  e004              B        |L16.246|
                  |L16.236|
0000ec  1e49              SUBS     r1,r1,#1
0000ee  6099              STR      r1,[r3,#8]  ; modify
0000f0  7801              LDRB     r1,[r0,#0]
0000f2  1c49              ADDS     r1,r1,#1
0000f4  7001              STRB     r1,[r0,#0]
                  |L16.246|
0000f6  6899              LDR      r1,[r3,#8]  ; modify
0000f8  2901              CMP      r1,#1
0000fa  daf7              BGE      |L16.236|
;;;847    	
;;;848    	//UnixÊ±¼ä
;;;849    	*p++ = ' ';
0000fc  7042              STRB     r2,[r0,#1]
;;;850    	*p++ = '0'; 
0000fe  2130              MOVS     r1,#0x30
000100  7081              STRB     r1,[r0,#2]
;;;851    	*p = '\0';
000102  2100              MOVS     r1,#0
000104  70c1              STRB     r1,[r0,#3]
                  |L16.262|
;;;852    	
;;;853    	for (;;)
;;;854    	{
;;;855    		ZS_SendByte(*name);
000106  7820              LDRB     r0,[r4,#0]
000108  f7fffffe          BL       ZS_SendByte
;;;856    		crc = Z_UpdateCRC(((unsigned short)*name), crc);
00010c  7820              LDRB     r0,[r4,#0]
00010e  4629              MOV      r1,r5
000110  f7fffffe          BL       Z_UpdateCRC
000114  4605              MOV      r5,r0
;;;857    		if (*name) ;
000116  7820              LDRB     r0,[r4,#0]
000118  b108              CBZ      r0,|L16.286|
00011a  1c64              ADDS     r4,r4,#1
;;;858    		else break;
;;;859    		name++;
00011c  e7f3              B        |L16.262|
                  |L16.286|
;;;860    	}
;;;861    	p = str;
00011e  466c              MOV      r4,sp
                  |L16.288|
;;;862    	for (;;)
;;;863    	{
;;;864    		ZS_SendByte(*p);
000120  7820              LDRB     r0,[r4,#0]
000122  f7fffffe          BL       ZS_SendByte
;;;865    		crc = Z_UpdateCRC(((unsigned short)*p), crc);
000126  7820              LDRB     r0,[r4,#0]
000128  4629              MOV      r1,r5
00012a  f7fffffe          BL       Z_UpdateCRC
00012e  4605              MOV      r5,r0
;;;866    		if (*p) ; else break;
000130  7820              LDRB     r0,[r4,#0]
000132  b108              CBZ      r0,|L16.312|
000134  1c64              ADDS     r4,r4,#1
;;;867    		p++;
000136  e7f3              B        |L16.288|
                  |L16.312|
;;;868    	}
;;;869    	SENDBYTE(ZDLE);
000138  2018              MOVS     r0,#0x18
00013a  f7fffffe          BL       zmputchar
;;;870    	SENDBYTE(ZCRCW);
00013e  206b              MOVS     r0,#0x6b
000140  f7fffffe          BL       zmputchar
;;;871    	crc = Z_UpdateCRC(ZCRCW, crc);
000144  4629              MOV      r1,r5
000146  206b              MOVS     r0,#0x6b
000148  f7fffffe          BL       Z_UpdateCRC
00014c  4601              MOV      r1,r0
;;;872    
;;;873    	crc = Z_UpdateCRC(0, crc);
00014e  2000              MOVS     r0,#0
000150  f7fffffe          BL       Z_UpdateCRC
000154  4601              MOV      r1,r0
;;;874    	crc = Z_UpdateCRC(0, crc);
000156  2000              MOVS     r0,#0
000158  f7fffffe          BL       Z_UpdateCRC
00015c  4604              MOV      r4,r0
;;;875    	ZS_SendByte(crc >> 8);
00015e  f3c02007          UBFX     r0,r0,#8,#8
000162  f7fffffe          BL       ZS_SendByte
;;;876    	ZS_SendByte(crc);
000166  b2e0              UXTB     r0,r4
000168  f7fffffe          BL       ZS_SendByte
;;;877    
;;;878    //	SENDBYTE(XON);
;;;879    }
00016c  bd7f              POP      {r0-r6,pc}
;;;880    
                          ENDP

00016e  0000              DCW      0x0000
                  |L16.368|
000170  30303030          DCB      "00000000 000 0",0
000174  30303030
000178  20303030
00017c  203000  
00017f  00                DCB      0
                  |L16.384|
                          DCD      0xfffe7960
                  |L16.388|
                          DCD      ||.data||

                          AREA ||i.ZS_SyncWithReceiver||, CODE, READONLY, ALIGN=2

                  ZS_SyncWithReceiver PROC
;;;884    /*--------------------------------------------------------------------------*/
;;;885    int ZS_SyncWithReceiver()
000000  b570              PUSH     {r4-r6,lr}
;;;886    {
;;;887    	int c;
;;;888    	int num_errs = 7;
000002  2407              MOVS     r4,#7
;;;889    
;;;890    	while(1)
;;;891    	{
;;;892    		c = Z_GetHeader(Rxhdr);
;;;893    
;;;894    		switch (c)
000004  f06f0502          MVN      r5,#2
000008  106e              ASRS     r6,r5,#1
                  |L17.10|
00000a  4814              LDR      r0,|L17.92|
00000c  f7fffffe          BL       Z_GetHeader
000010  2805              CMP      r0,#5
000012  d008              BEQ      |L17.38|
000014  dc08              BGT      |L17.40|
000016  42a8              CMP      r0,r5
000018  d018              BEQ      |L17.76|
00001a  42b0              CMP      r0,r6
00001c  d012              BEQ      |L17.68|
00001e  2801              CMP      r0,#1
000020  d001              BEQ      |L17.38|
000022  2803              CMP      r0,#3
000024  d108              BNE      |L17.56|
                  |L17.38|
;;;895    		{
;;;896    			case ZZTIMEOUT:  if ((num_errs--) >= 0) break;
;;;897    			case ZCAN:
;;;898    			case ZABORT:
;;;899    			case ZFIN:
;;;900    			case ZZRCDO:
;;;901    						/*-----------------------------------------*/
;;;902    						/*                                         */
;;;903    						/*-----------------------------------------*/
;;;904    				return ZZERROR;
;;;905    			case ZRPOS:	/*-----------------------------------------*/
;;;906    						/*                                         */
;;;907    						/*-----------------------------------------*/
;;;908    				Txpos = Rxpos;
;;;909    				return c;
;;;910    			case ZSKIP:	/*-----------------------------------------*/
;;;911    						/*                                         */
;;;912    						/*-----------------------------------------*/
;;;913    			case ZRINIT:/*-----------------------------------------*/
;;;914    						/*                                         */
;;;915    						/*-----------------------------------------*/
;;;916    				return c;
;;;917    			case ZACK:	/*-----------------------------------------*/
;;;918    						/*                                         */
;;;919    						/*-----------------------------------------*/
;;;920    				return c;
;;;921    			default:	/*-----------------------------------------*/
;;;922    						/*                                         */
;;;923    						/*-----------------------------------------*/
;;;924    				ZS_SendBinaryHeader(ZNAK, Txhdr);
;;;925    				continue;
;;;926    		}
;;;927    	}
;;;928    }
000026  bd70              POP      {r4-r6,pc}
                  |L17.40|
000028  2807              CMP      r0,#7                 ;894
00002a  d00f              BEQ      |L17.76|
00002c  2808              CMP      r0,#8                 ;894
00002e  d00d              BEQ      |L17.76|
000030  2809              CMP      r0,#9                 ;894
000032  d00e              BEQ      |L17.82|
000034  2810              CMP      r0,#0x10              ;894
000036  d009              BEQ      |L17.76|
                  |L17.56|
000038  4908              LDR      r1,|L17.92|
00003a  2006              MOVS     r0,#6                 ;924
00003c  1d09              ADDS     r1,r1,#4              ;924
00003e  f7fffffe          BL       ZS_SendBinaryHeader
000042  e7e2              B        |L17.10|
                  |L17.68|
000044  0020              MOVS     r0,r4                 ;896
000046  f1a00401          SUB      r4,r0,#1              ;896
00004a  d5de              BPL      |L17.10|
                  |L17.76|
00004c  f04f30ff          MOV      r0,#0xffffffff        ;904
000050  bd70              POP      {r4-r6,pc}
                  |L17.82|
000052  4902              LDR      r1,|L17.92|
000054  3920              SUBS     r1,r1,#0x20           ;908
000056  6a8a              LDR      r2,[r1,#0x28]         ;908  ; Rxpos
000058  634a              STR      r2,[r1,#0x34]         ;908  ; Txpos
00005a  bd70              POP      {r4-r6,pc}
;;;929    
                          ENDP

                  |L17.92|
                          DCD      ||.data||+0x20

                          AREA ||i.Z_ClearByte||, CODE, READONLY, ALIGN=2

                  Z_ClearByte PROC
;;;61     
;;;62     void Z_ClearByte()
000000  b510              PUSH     {r4,lr}
;;;63     {
;;;64     	memset(Attn,0,sizeof(Attn));
000002  2121              MOVS     r1,#0x21
000004  4804              LDR      r0,|L18.24|
000006  f7fffffe          BL       __aeabi_memclr
;;;65     	memset(Recbuf,0,sizeof(Recbuf));
00000a  4803              LDR      r0,|L18.24|
00000c  2140              MOVS     r1,#0x40
00000e  e8bd4010          POP      {r4,lr}
000012  3021              ADDS     r0,r0,#0x21
000014  f7ffbffe          B.W      __aeabi_memclr
;;;66     }
;;;67     
                          ENDP

                  |L18.24|
                          DCD      ||.bss||

                          AREA ||i.Z_GetHeader||, CODE, READONLY, ALIGN=2

                  Z_GetHeader PROC
;;;324    /*--------------------------------------------------------------------------*/
;;;325    int Z_GetHeader(char *hdr)                                                             //Z_GetHeader“?”
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;326    { int c,n,cancount;
;;;327    
;;;328      n = 10;   /* Max characters before start of frame */                                 //……
000004  260a              MOVS     r6,#0xa
;;;329      cancount = 5;
000006  2405              MOVS     r4,#5
;;;330    
;;;331    Again:
;;;332      Rxframeind = Rxtype = 0;
000008  4f2d              LDR      r7,|L19.192|
00000a  4682              MOV      r10,r0                ;326
00000c  f04f0900          MOV      r9,#0                 ;329
;;;333    
;;;334      c = _Z_TimedRead(); if (bTimeOut) c = ZZTIMEOUT;
;;;335      switch (c) {
000010  f06f0802          MVN      r8,#2
000014  1fe5              SUBS     r5,r4,#7              ;334
                  |L19.22|
000016  f8c79010          STR      r9,[r7,#0x10]         ;332  ; Rxtype
00001a  f8c79014          STR      r9,[r7,#0x14]         ;334  ; Rxframeind
00001e  f7fffffe          BL       _Z_TimedRead
000022  4603              MOV      r3,r0                 ;334
000024  7838              LDRB     r0,[r7,#0]            ;334  ; bTimeOut
000026  b100              CBZ      r0,|L19.42|
000028  462b              MOV      r3,r5                 ;334
                  |L19.42|
00002a  4543              CMP      r3,r8
00002c  d046              BEQ      |L19.188|
00002e  42ab              CMP      r3,r5
000030  d044              BEQ      |L19.188|
000032  2b18              CMP      r3,#0x18
000034  d03e              BEQ      |L19.180|
000036  2b2a              CMP      r3,#0x2a
000038  d009              BEQ      |L19.78|
                  |L19.58|
00003a  1e76              SUBS     r6,r6,#1
;;;336        case ZPAD: break; // This is what we want.                                        //???????
;;;337        case ZZRCDO:
;;;338        case ZZTIMEOUT: goto Done; //Timeout                                              //????
;;;339        case CAN: if (--cancount <= 0) { c = ZCAN; goto Done; } //Cancel no break         //??,?????
;;;340        default:
;;;341    Agn2: if (--n <= 0) return ZCAN;
00003c  2e00              CMP      r6,#0
00003e  dc02              BGT      |L19.70|
000040  2010              MOVS     r0,#0x10
                  |L19.66|
;;;342          if (c != CAN) cancount = 5;
;;;343          goto Again;
;;;344        }
;;;345    
;;;346      cancount = 5;
;;;347    Splat:
;;;348      c = _Z_TimedRead(); if (bTimeOut) c = ZZTIMEOUT;
;;;349      switch (c) {
;;;350        case ZDLE: break; // This is what we want.                                        //???????
;;;351        case ZPAD: goto Splat;
;;;352        case ZZRCDO:
;;;353        case ZZTIMEOUT: goto Done; //Timeout                                              //????
;;;354        default: goto Agn2;
;;;355        }
;;;356    
;;;357      c = _Z_TimedRead(); if (bTimeOut) c = ZZTIMEOUT;
;;;358      switch (c) {
;;;359        case ZBIN: //BIN head                                                             
;;;360          Rxframeind = ZBIN;
;;;361          c =  _Z_GetBinaryHeader(hdr);
;;;362          break;
;;;363        case ZHEX: //HEX head
;;;364          Rxframeind = ZHEX;
;;;365          c =  _Z_GetHexHeader(hdr);
;;;366          break;
;;;367        case CAN: //Cancel
;;;368          if (--cancount <= 0) { c = ZCAN; goto Done; }
;;;369          goto Agn2;
;;;370        case ZZRCDO:
;;;371        case ZZTIMEOUT: goto Done; //Timeout
;;;372        default: goto Agn2;
;;;373        }
;;;374    
;;;375      Rxpos = _Z_PullLongFromHeader(hdr);
;;;376    Done:
;;;377      return c;
;;;378    }
000042  e8bd87f0          POP      {r4-r10,pc}
                  |L19.70|
000046  2b18              CMP      r3,#0x18              ;342
000048  d0e5              BEQ      |L19.22|
00004a  2405              MOVS     r4,#5                 ;342
00004c  e7e3              B        |L19.22|
                  |L19.78|
00004e  2405              MOVS     r4,#5                 ;346
                  |L19.80|
000050  f7fffffe          BL       _Z_TimedRead
000054  4603              MOV      r3,r0                 ;348
000056  7838              LDRB     r0,[r7,#0]            ;348  ; bTimeOut
000058  b100              CBZ      r0,|L19.92|
00005a  462b              MOV      r3,r5                 ;348
                  |L19.92|
00005c  4543              CMP      r3,r8                 ;349
00005e  d02d              BEQ      |L19.188|
000060  42ab              CMP      r3,r5                 ;349
000062  d02b              BEQ      |L19.188|
000064  2b18              CMP      r3,#0x18              ;349
000066  d002              BEQ      |L19.110|
000068  2b2a              CMP      r3,#0x2a              ;349
00006a  d0f1              BEQ      |L19.80|
00006c  e7e5              B        |L19.58|
                  |L19.110|
00006e  f7fffffe          BL       _Z_TimedRead
000072  4603              MOV      r3,r0                 ;357
000074  7838              LDRB     r0,[r7,#0]            ;357  ; bTimeOut
000076  b100              CBZ      r0,|L19.122|
000078  462b              MOV      r3,r5                 ;357
                  |L19.122|
00007a  2b18              CMP      r3,#0x18              ;358
00007c  d01a              BEQ      |L19.180|
00007e  dc04              BGT      |L19.138|
000080  4543              CMP      r3,r8                 ;358
000082  d01b              BEQ      |L19.188|
000084  42ab              CMP      r3,r5                 ;358
000086  d1d8              BNE      |L19.58|
000088  e018              B        |L19.188|
                  |L19.138|
00008a  2b41              CMP      r3,#0x41              ;358
00008c  d00c              BEQ      |L19.168|
00008e  2b42              CMP      r3,#0x42              ;358
000090  d1d3              BNE      |L19.58|
000092  2042              MOVS     r0,#0x42              ;364
000094  6178              STR      r0,[r7,#0x14]         ;365  ; Rxframeind
000096  4650              MOV      r0,r10                ;365
000098  f7fffffe          BL       _Z_GetHexHeader
                  |L19.156|
00009c  4603              MOV      r3,r0                 ;361
00009e  4650              MOV      r0,r10                ;375
0000a0  f7fffffe          BL       _Z_PullLongFromHeader
0000a4  62b8              STR      r0,[r7,#0x28]         ;376  ; Rxpos
0000a6  e009              B        |L19.188|
                  |L19.168|
0000a8  2041              MOVS     r0,#0x41              ;360
0000aa  6178              STR      r0,[r7,#0x14]         ;361  ; Rxframeind
0000ac  4650              MOV      r0,r10                ;361
0000ae  f7fffffe          BL       _Z_GetBinaryHeader
0000b2  e7f3              B        |L19.156|
                  |L19.180|
0000b4  1e64              SUBS     r4,r4,#1              ;362
0000b6  2c00              CMP      r4,#0                 ;368
0000b8  dcbf              BGT      |L19.58|
0000ba  2310              MOVS     r3,#0x10              ;368
                  |L19.188|
0000bc  4618              MOV      r0,r3                 ;377
0000be  e7c0              B        |L19.66|
;;;379    
                          ENDP

                  |L19.192|
                          DCD      ||.data||

                          AREA ||i.Z_GetZDL||, CODE, READONLY, ALIGN=2

                  Z_GetZDL PROC
;;;191    /*--------------------------------------------------------------------------*/
;;;192    int Z_GetZDL(void)                                                      //Z_GetZDL……
000000  b570              PUSH     {r4-r6,lr}
;;;193    { int c;
;;;194    
;;;195      c = Z_GetByte(1000); if (bTimeOut) return ZZTIMEOUT;
000002  f44f757a          MOV      r5,#0x3e8
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       readline
00000c  4c23              LDR      r4,|L20.156|
00000e  f06f0601          MVN      r6,#1
000012  7821              LDRB     r1,[r4,#0]  ; bTimeOut
000014  bb81              CBNZ     r1,|L20.120|
;;;196      if (c != ZDLE) return c;
000016  2818              CMP      r0,#0x18
000018  d11a              BNE      |L20.80|
;;;197    
;;;198      c = Z_GetByte(1000); if (bTimeOut) return ZZTIMEOUT;
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       readline
000020  7821              LDRB     r1,[r4,#0]  ; bTimeOut
000022  bb49              CBNZ     r1,|L20.120|
;;;199      switch (c) {
000024  286a              CMP      r0,#0x6a
000026  d02e              BEQ      |L20.134|
000028  dc06              BGT      |L20.56|
00002a  2818              CMP      r0,#0x18
00002c  d011              BEQ      |L20.82|
00002e  2868              CMP      r0,#0x68
000030  d029              BEQ      |L20.134|
000032  2869              CMP      r0,#0x69
000034  d106              BNE      |L20.68|
000036  e026              B        |L20.134|
                  |L20.56|
000038  286b              CMP      r0,#0x6b
00003a  d024              BEQ      |L20.134|
00003c  286c              CMP      r0,#0x6c
00003e  d025              BEQ      |L20.140|
000040  286d              CMP      r0,#0x6d
000042  d025              BEQ      |L20.144|
                  |L20.68|
;;;200        case CAN:
;;;201          c = Z_GetByte(1000); if (bTimeOut) return ZZTIMEOUT;
;;;202          if (c != CAN) return c;
;;;203          c = Z_GetByte(1000); if (bTimeOut) return ZZTIMEOUT;
;;;204          if (c != CAN) return c;
;;;205          c = Z_GetByte(1000); if (bTimeOut) return ZZTIMEOUT;
;;;206          if (c != CAN) return c;
;;;207          return (GOTCAN);
;;;208        case ZCRCE:
;;;209        case ZCRCG:
;;;210        case ZCRCQ:
;;;211        case ZCRCW: return (c | GOTOR);
;;;212        case ZRUB0: return 0x7F;
;;;213        case ZRUB1: return 0xFF;
;;;214        default:
;;;215          if ((c & 0x60) == 0x40) return c ^ 0x40;
000044  f3c01141          UBFX     r1,r0,#5,#2
000048  2902              CMP      r1,#2
00004a  d023              BEQ      |L20.148|
;;;216          else return ZZERROR;
00004c  f04f30ff          MOV      r0,#0xffffffff
                  |L20.80|
;;;217        }
;;;218    }
000050  bd70              POP      {r4-r6,pc}
                  |L20.82|
000052  4628              MOV      r0,r5                 ;201
000054  f7fffffe          BL       readline
000058  7821              LDRB     r1,[r4,#0]            ;201  ; bTimeOut
00005a  b969              CBNZ     r1,|L20.120|
00005c  2818              CMP      r0,#0x18              ;202
00005e  d1f7              BNE      |L20.80|
000060  4628              MOV      r0,r5                 ;203
000062  f7fffffe          BL       readline
000066  7821              LDRB     r1,[r4,#0]            ;203  ; bTimeOut
000068  b931              CBNZ     r1,|L20.120|
00006a  2818              CMP      r0,#0x18              ;204
00006c  d1f0              BNE      |L20.80|
00006e  4628              MOV      r0,r5                 ;205
000070  f7fffffe          BL       readline
000074  7821              LDRB     r1,[r4,#0]            ;205  ; bTimeOut
000076  b109              CBZ      r1,|L20.124|
                  |L20.120|
000078  4630              MOV      r0,r6                 ;205
                  |L20.122|
00007a  bd70              POP      {r4-r6,pc}
                  |L20.124|
00007c  2818              CMP      r0,#0x18              ;206
00007e  d1fc              BNE      |L20.122|
000080  f44f708c          MOV      r0,#0x118             ;207
000084  bd70              POP      {r4-r6,pc}
                  |L20.134|
000086  f4407080          ORR      r0,r0,#0x100          ;211
00008a  bd70              POP      {r4-r6,pc}
                  |L20.140|
00008c  207f              MOVS     r0,#0x7f              ;212
00008e  bd70              POP      {r4-r6,pc}
                  |L20.144|
000090  20ff              MOVS     r0,#0xff              ;213
000092  bd70              POP      {r4-r6,pc}
                  |L20.148|
000094  f0800040          EOR      r0,r0,#0x40           ;215
000098  bd70              POP      {r4-r6,pc}
;;;219    
                          ENDP

00009a  0000              DCW      0x0000
                  |L20.156|
                          DCD      ||.data||

                          AREA ||i.Z_PutLongIntoHeader||, CODE, READONLY, ALIGN=2

                  Z_PutLongIntoHeader PROC
;;;310    /*--------------------------------------------------------------------------*/
;;;311    void Z_PutLongIntoHeader(DWORD pos)                                                     //Z_PutLongIntoHeader“?”
000000  4904              LDR      r1,|L21.20|
;;;312    {
;;;313      Txhdr[ZP0] = pos;
;;;314      Txhdr[ZP1] = pos>>8;
000002  0a02              LSRS     r2,r0,#8
000004  7008              STRB     r0,[r1,#0]            ;313
000006  704a              STRB     r2,[r1,#1]
;;;315      Txhdr[ZP2] = pos>>16;
000008  0c02              LSRS     r2,r0,#16
00000a  708a              STRB     r2,[r1,#2]
;;;316      Txhdr[ZP3] = pos>>24;
00000c  0e00              LSRS     r0,r0,#24
00000e  70c8              STRB     r0,[r1,#3]
;;;317    }
000010  4770              BX       lr
;;;318    
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      ||.data||+0x24

                          AREA ||i.Z_SendHexHeader||, CODE, READONLY, ALIGN=2

                  Z_SendHexHeader PROC
;;;158    /*--------------------------------------------------------------------------*/   //??zmodem……
;;;159    void Z_SendHexHeader(BYTE type,char *hdr)                                        //Z_SendHexHeader
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;160    { int n; BYTE i; WORD crc;
000004  4681              MOV      r9,r0
000006  460c              MOV      r4,r1
;;;161    
;;;162      SENDBYTE(ZPAD);
000008  202a              MOVS     r0,#0x2a
00000a  f7fffffe          BL       zmputchar
;;;163      SENDBYTE(ZPAD);
00000e  202a              MOVS     r0,#0x2a
000010  f7fffffe          BL       zmputchar
;;;164      SENDBYTE(ZDLE);
000014  2018              MOVS     r0,#0x18
000016  f7fffffe          BL       zmputchar
;;;165      SENDBYTE(ZHEX);
00001a  2042              MOVS     r0,#0x42
00001c  f7fffffe          BL       zmputchar
;;;166      Z_PUTHEX(i,type);
000020  4d2c              LDR      r5,|L22.212|
000022  464e              MOV      r6,r9
000024  eb051016          ADD      r0,r5,r6,LSR #4
000028  7800              LDRB     r0,[r0,#0]
00002a  f7fffffe          BL       zmputchar
00002e  f006000f          AND      r0,r6,#0xf
000032  5c28              LDRB     r0,[r5,r0]
000034  f7fffffe          BL       zmputchar
;;;167    
;;;168      crc = Z_UpdateCRC(type, 0);
000038  2100              MOVS     r1,#0
00003a  4648              MOV      r0,r9
00003c  f7fffffe          BL       Z_UpdateCRC
000040  4607              MOV      r7,r0
;;;169      for (n=4; --n >= 0;) {
000042  2604              MOVS     r6,#4
000044  46a8              MOV      r8,r5                 ;166
000046  e011              B        |L22.108|
                  |L22.72|
;;;170        Z_PUTHEX(i,(*hdr));
000048  7825              LDRB     r5,[r4,#0]
00004a  eb081015          ADD      r0,r8,r5,LSR #4
00004e  7800              LDRB     r0,[r0,#0]
000050  f7fffffe          BL       zmputchar
000054  f005010f          AND      r1,r5,#0xf
000058  f8180001          LDRB     r0,[r8,r1]
00005c  f7fffffe          BL       zmputchar
;;;171        crc = Z_UpdateCRC(((unsigned short)(*hdr++)), crc);
000060  f8140b01          LDRB     r0,[r4],#1
000064  4639              MOV      r1,r7
000066  f7fffffe          BL       Z_UpdateCRC
00006a  4607              MOV      r7,r0
                  |L22.108|
00006c  1e76              SUBS     r6,r6,#1
00006e  d5eb              BPL      |L22.72|
;;;172        }
;;;173      crc = Z_UpdateCRC(0,crc);
000070  4601              MOV      r1,r0
000072  2000              MOVS     r0,#0
000074  f7fffffe          BL       Z_UpdateCRC
000078  4601              MOV      r1,r0
;;;174      crc = Z_UpdateCRC(0,crc);
00007a  2000              MOVS     r0,#0
00007c  f7fffffe          BL       Z_UpdateCRC
000080  4606              MOV      r6,r0
;;;175      Z_PUTHEX(i,(crc>>8));
000082  f3c02407          UBFX     r4,r0,#8,#8
000086  eb081014          ADD      r0,r8,r4,LSR #4
00008a  4645              MOV      r5,r8
00008c  7800              LDRB     r0,[r0,#0]
00008e  f7fffffe          BL       zmputchar
000092  f004000f          AND      r0,r4,#0xf
000096  5c28              LDRB     r0,[r5,r0]
000098  f7fffffe          BL       zmputchar
;;;176      Z_PUTHEX(i,crc);
00009c  b2f4              UXTB     r4,r6
00009e  eb051014          ADD      r0,r5,r4,LSR #4
0000a2  7800              LDRB     r0,[r0,#0]
0000a4  f7fffffe          BL       zmputchar
0000a8  f004000f          AND      r0,r4,#0xf
0000ac  5c28              LDRB     r0,[r5,r0]
0000ae  f7fffffe          BL       zmputchar
;;;177    
;;;178      /* Make it printable on remote machine */                                //????????????
;;;179      SENDBYTE('\x0d'); 
0000b2  200d              MOVS     r0,#0xd
0000b4  f7fffffe          BL       zmputchar
;;;180    	SENDBYTE('\x0a');
0000b8  200a              MOVS     r0,#0xa
0000ba  f7fffffe          BL       zmputchar
;;;181    
;;;182      /* Uncork the remote in case a fake XOFF has stopped data flow */    
;;;183      if (type != ZFIN) SENDBYTE(021);
0000be  f1b90f08          CMP      r9,#8
0000c2  d004              BEQ      |L22.206|
0000c4  e8bd47f0          POP      {r4-r10,lr}
0000c8  2011              MOVS     r0,#0x11
0000ca  f7ffbffe          B.W      zmputchar
                  |L22.206|
;;;184    }
0000ce  e8bd87f0          POP      {r4-r10,pc}
;;;185    
                          ENDP

0000d2  0000              DCW      0x0000
                  |L22.212|
                          DCD      ||.data||+0x38

                          AREA ||i.Z_TestOneByte||, CODE, READONLY, ALIGN=1

                  Z_TestOneByte PROC
;;;68     
;;;69     int Z_TestOneByte(){return 0;}
000000  2000              MOVS     r0,#0
000002  4770              BX       lr
;;;70     
                          ENDP


                          AREA ||i.Z_UpdateCRC||, CODE, READONLY, ALIGN=1

                  Z_UpdateCRC PROC
;;;130    
;;;131    WORD Z_UpdateCRC(WORD c, WORD crc)                           //??CRC(Z_UpdateCRC)
000000  b510              PUSH     {r4,lr}
;;;132    { int count;
;;;133    
;;;134      for (count=8; --count>=0; ) {
000002  2208              MOVS     r2,#8
;;;135        if (crc & 0x8000) {
;;;136          crc <<= 1;
;;;137          crc += (((c<<=1) & 0400)  !=  0);
;;;138          crc ^= 0x1021;
000004  f2410321          MOV      r3,#0x1021
000008  e008              B        |L24.28|
                  |L24.10|
00000a  040c              LSLS     r4,r1,#16             ;135
;;;139          }
;;;140        else {
;;;141          crc <<= 1;
;;;142          crc += (((c<<=1) & 0400)  !=  0);
00000c  ea4f0040          LSL      r0,r0,#1
000010  f3c02400          UBFX     r4,r0,#8,#1
000014  eb040141          ADD      r1,r4,r1,LSL #1
000018  d500              BPL      |L24.28|
00001a  4059              EORS     r1,r1,r3              ;138
                  |L24.28|
00001c  1e52              SUBS     r2,r2,#1              ;138
00001e  d5f4              BPL      |L24.10|
;;;143          }
;;;144        }
;;;145      return crc;
000020  4608              MOV      r0,r1
;;;146    }
000022  bd10              POP      {r4,pc}
;;;147    #endif
                          ENDP


                          AREA ||i._Z_GetBinaryHeader||, CODE, READONLY, ALIGN=2

                  _Z_GetBinaryHeader PROC
;;;223    /*--------------------------------------------------------------------------*/
;;;224    int _Z_GetBinaryHeader(char *hdr)                         //_Z_GetBinaryHeader“?”
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;225    { int c,n; WORD crc;
000004  4604              MOV      r4,r0
;;;226    
;;;227      if ((c   = Z_GetZDL()) & ~0xFF)   return c;
000006  f7fffffe          BL       Z_GetZDL
00000a  0a01              LSRS     r1,r0,#8
00000c  d10c              BNE      |L25.40|
;;;228      Rxtype   = c;
00000e  4e17              LDR      r6,|L25.108|
;;;229      crc      = Z_UpdateCRC(c, 0);
000010  6130              STR      r0,[r6,#0x10]  ; Rxtype
000012  f7fffffe          BL       Z_UpdateCRC
000016  4680              MOV      r8,r0
;;;230    
;;;231      for (n=4; --n >= 0;) {
000018  2504              MOVS     r5,#4
00001a  e00e              B        |L25.58|
                  |L25.28|
;;;232        if ((c = Z_GetZDL()) & ~0xFF) return c;
00001c  f7fffffe          BL       Z_GetZDL
000020  4607              MOV      r7,r0
000022  0a00              LSRS     r0,r0,#8
000024  d002              BEQ      |L25.44|
000026  4638              MOV      r0,r7
                  |L25.40|
;;;233        crc = Z_UpdateCRC(c, crc);
;;;234        *hdr++ = c;
;;;235        }
;;;236      if ((c   = Z_GetZDL()) & ~0xFF) return c;
;;;237      crc      = Z_UpdateCRC(c, crc);
;;;238      if ((c   = Z_GetZDL()) & ~0xFF) return c;
;;;239    
;;;240      crc = Z_UpdateCRC(c, crc);
;;;241      if (crc & 0xFFFF) return ZZERROR;     //CRC error
;;;242    
;;;243      return Rxtype;
;;;244    }
000028  e8bd81f0          POP      {r4-r8,pc}
                  |L25.44|
00002c  4641              MOV      r1,r8                 ;233
00002e  4638              MOV      r0,r7                 ;233
000030  f7fffffe          BL       Z_UpdateCRC
000034  4680              MOV      r8,r0                 ;233
000036  f8047b01          STRB     r7,[r4],#1            ;234
                  |L25.58|
00003a  1e6d              SUBS     r5,r5,#1              ;234
00003c  d5ee              BPL      |L25.28|
00003e  f7fffffe          BL       Z_GetZDL
000042  0a01              LSRS     r1,r0,#8              ;236
000044  d1f0              BNE      |L25.40|
000046  4641              MOV      r1,r8                 ;237
000048  f7fffffe          BL       Z_UpdateCRC
00004c  4604              MOV      r4,r0                 ;237
00004e  f7fffffe          BL       Z_GetZDL
000052  0a01              LSRS     r1,r0,#8              ;238
000054  d1e8              BNE      |L25.40|
000056  4621              MOV      r1,r4                 ;240
000058  f7fffffe          BL       Z_UpdateCRC
00005c  0400              LSLS     r0,r0,#16             ;241
00005e  0c00              LSRS     r0,r0,#16             ;241
000060  d002              BEQ      |L25.104|
000062  f04f30ff          MOV      r0,#0xffffffff        ;241
000066  e7df              B        |L25.40|
                  |L25.104|
000068  6930              LDR      r0,[r6,#0x10]         ;243  ; Rxtype
00006a  e7dd              B        |L25.40|
;;;245    
                          ENDP

                  |L25.108|
                          DCD      ||.data||

                          AREA ||i._Z_GetHex||, CODE, READONLY, ALIGN=2

                  _Z_GetHex PROC
;;;249    /*--------------------------------------------------------------------------*/
;;;250    int _Z_GetHex(void)                                                 //_Z_GetHex“?”
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;251    { int ch,cl;
;;;252    
;;;253      ch = _Z_TimedRead(); if (bTimeOut) return ZZTIMEOUT;
000004  f7fffffe          BL       _Z_TimedRead
000008  4d10              LDR      r5,|L26.76|
00000a  f06f0601          MVN      r6,#1
00000e  7829              LDRB     r1,[r5,#0]  ; bTimeOut
000010  b969              CBNZ     r1,|L26.46|
;;;254      ch -= '0';
000012  f1a00430          SUB      r4,r0,#0x30
;;;255      if (ch > 9) ch -= ('a' - ':');
000016  2c09              CMP      r4,#9
000018  dd00              BLE      |L26.28|
00001a  3c27              SUBS     r4,r4,#0x27
                  |L26.28|
;;;256      if (ch & 0xf0) return ZZERROR;
00001c  f0140ff0          TST      r4,#0xf0
000020  f04f37ff          MOV      r7,#0xffffffff
000024  d10d              BNE      |L26.66|
;;;257    
;;;258      cl = _Z_TimedRead(); if (bTimeOut) return ZZTIMEOUT;
000026  f7fffffe          BL       _Z_TimedRead
00002a  7829              LDRB     r1,[r5,#0]  ; bTimeOut
00002c  b111              CBZ      r1,|L26.52|
                  |L26.46|
00002e  4630              MOV      r0,r6
                  |L26.48|
;;;259      cl -= '0';
;;;260      if (cl > 9) cl -= ('a' - ':');
;;;261      if (cl & 0xf0) return ZZERROR;
;;;262    
;;;263      return ((ch << 4) | cl);
;;;264    }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L26.52|
000034  3830              SUBS     r0,r0,#0x30
000036  2809              CMP      r0,#9                 ;260
000038  dd00              BLE      |L26.60|
00003a  3827              SUBS     r0,r0,#0x27           ;260
                  |L26.60|
00003c  f0100ff0          TST      r0,#0xf0              ;261
000040  d001              BEQ      |L26.70|
                  |L26.66|
000042  4638              MOV      r0,r7                 ;261
000044  e7f4              B        |L26.48|
                  |L26.70|
000046  ea401004          ORR      r0,r0,r4,LSL #4       ;263
00004a  e7f1              B        |L26.48|
;;;265    
                          ENDP

                  |L26.76|
                          DCD      ||.data||

                          AREA ||i._Z_GetHexHeader||, CODE, READONLY, ALIGN=2

                  _Z_GetHexHeader PROC
;;;269    /*--------------------------------------------------------------------------*/
;;;270    int _Z_GetHexHeader(char *hdr)                                     //_Z_GetHexHeader“?”
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;271    { int c,n; WORD crc;
000004  4604              MOV      r4,r0
;;;272    
;;;273      if ((c   = _Z_GetHex()) < 0) return c;
000006  f7fffffe          BL       _Z_GetHex
00000a  2800              CMP      r0,#0
00000c  db27              BLT      |L27.94|
;;;274      Rxtype   = c;
00000e  4e1c              LDR      r6,|L27.128|
;;;275      crc      = Z_UpdateCRC(c, 0);
000010  2100              MOVS     r1,#0
000012  6130              STR      r0,[r6,#0x10]  ; Rxtype
000014  f7fffffe          BL       Z_UpdateCRC
000018  4680              MOV      r8,r0
;;;276    
;;;277      for (n=4; --n >= 0;) {
00001a  2504              MOVS     r5,#4
00001c  e009              B        |L27.50|
                  |L27.30|
;;;278        if ((c = _Z_GetHex()) < 0) return c;
00001e  f7fffffe          BL       _Z_GetHex
000022  0007              MOVS     r7,r0
000024  d41b              BMI      |L27.94|
;;;279        crc      = Z_UpdateCRC(c, crc);
000026  4641              MOV      r1,r8
000028  f7fffffe          BL       Z_UpdateCRC
00002c  4680              MOV      r8,r0
;;;280        *hdr++   = c;
00002e  f8047b01          STRB     r7,[r4],#1
                  |L27.50|
000032  1e6d              SUBS     r5,r5,#1
000034  d5f3              BPL      |L27.30|
;;;281        }
;;;282      if ((c = _Z_GetHex()) < 0) return c;
000036  f7fffffe          BL       _Z_GetHex
00003a  2800              CMP      r0,#0
00003c  db0f              BLT      |L27.94|
;;;283      crc = Z_UpdateCRC(c, crc);
00003e  4641              MOV      r1,r8
000040  f7fffffe          BL       Z_UpdateCRC
000044  4604              MOV      r4,r0
;;;284      if ((c = _Z_GetHex()) < 0) return c;
000046  f7fffffe          BL       _Z_GetHex
00004a  2800              CMP      r0,#0
00004c  db07              BLT      |L27.94|
;;;285      crc = Z_UpdateCRC(c, crc);
00004e  4621              MOV      r1,r4
000050  f7fffffe          BL       Z_UpdateCRC
;;;286      if (crc & 0xFFFF) return ZZERROR;     //CRC error         //CRC??
000054  0400              LSLS     r0,r0,#16
000056  0c00              LSRS     r0,r0,#16
000058  d003              BEQ      |L27.98|
00005a  f04f30ff          MOV      r0,#0xffffffff
                  |L27.94|
;;;287      c = Z_GetByte(1000);
;;;288      if (!bTimeOut) { if (c == '\x0d') Z_GetByte(1000); } // Throw away possible cr/lf     //?????cr/lf
;;;289    
;;;290      return Rxtype;
;;;291    }
00005e  e8bd81f0          POP      {r4-r8,pc}
                  |L27.98|
000062  f44f747a          MOV      r4,#0x3e8             ;287
000066  4620              MOV      r0,r4                 ;287
000068  f7fffffe          BL       readline
00006c  7831              LDRB     r1,[r6,#0]            ;288  ; bTimeOut
00006e  b921              CBNZ     r1,|L27.122|
000070  280d              CMP      r0,#0xd               ;288
000072  d102              BNE      |L27.122|
000074  4620              MOV      r0,r4                 ;288
000076  f7fffffe          BL       readline
                  |L27.122|
00007a  6930              LDR      r0,[r6,#0x10]         ;290  ; Rxtype
00007c  e7ef              B        |L27.94|
;;;292    
                          ENDP

00007e  0000              DCW      0x0000
                  |L27.128|
                          DCD      ||.data||

                          AREA ||i._Z_PullLongFromHeader||, CODE, READONLY, ALIGN=1

                  _Z_PullLongFromHeader PROC
;;;296    /*--------------------------------------------------------------------------*/
;;;297    DWORD _Z_PullLongFromHeader(char *hdr)                                                  //_Z_PullLongFromHeader“?”
000000  78c1              LDRB     r1,[r0,#3]
;;;298    { DWORD l;
;;;299    
;;;300      l = hdr[ZP3];
;;;301      l = (l << 8) | hdr[ZP2];
000002  7882              LDRB     r2,[r0,#2]
000004  ea422101          ORR      r1,r2,r1,LSL #8
;;;302      l = (l << 8) | hdr[ZP1];
000008  7842              LDRB     r2,[r0,#1]
;;;303      l = (l << 8) | hdr[ZP0];
00000a  7800              LDRB     r0,[r0,#0]
00000c  ea422101          ORR      r1,r2,r1,LSL #8       ;302
000010  ea402001          ORR      r0,r0,r1,LSL #8
;;;304      return l;
;;;305    }
000014  4770              BX       lr
;;;306    
                          ENDP


                          AREA ||i._Z_TimedRead||, CODE, READONLY, ALIGN=2

                  _Z_TimedRead PROC
;;;75     /*--------------------------------------------------------------------------*/
;;;76     BYTE _Z_TimedRead()
000000  b570              PUSH     {r4-r6,lr}
;;;77     {
;;;78       for (;;) {
;;;79         BYTE c = Z_GetByte(30000); if (bTimeOut) return c;
000002  4c08              LDR      r4,|L29.36|
000004  f2475530          MOV      r5,#0x7530
                  |L29.8|
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       readline
00000e  7821              LDRB     r1,[r4,#0]  ; bTimeOut
000010  b2c0              UXTB     r0,r0
000012  2900              CMP      r1,#0
000014  d105              BNE      |L29.34|
;;;80         if ((c & 0x7f) == XON) ;
000016  f000017f          AND      r1,r0,#0x7f
00001a  2911              CMP      r1,#0x11
00001c  d0f4              BEQ      |L29.8|
;;;81         else if ((c & 0x7f) == XOFF) ;
00001e  2913              CMP      r1,#0x13
000020  d0f2              BEQ      |L29.8|
                  |L29.34|
;;;82         else return c;
;;;83         }
;;;84     }
000022  bd70              POP      {r4-r6,pc}
;;;85     
                          ENDP

                  |L29.36|
                          DCD      ||.data||

                          AREA ||i.get_Zmodem||, CODE, READONLY, ALIGN=2

                  get_Zmodem PROC
;;;629    
;;;630    DWORD get_Zmodem(BYTE *p)
000000  b570              PUSH     {r4-r6,lr}
;;;631    { int i;
;;;632    
;;;633      Tryzhdrtype = ZRINIT;
000002  4c17              LDR      r4,|L30.96|
000004  4605              MOV      r5,r0                 ;631
000006  2001              MOVS     r0,#1
;;;634    
;;;635      //Z_ClearByte();
;;;636    
;;;637      FileBuf = (BYTE *)p;
;;;638      i = RZ_InitReceiver();
000008  60e5              STR      r5,[r4,#0xc]  ; FileBuf
00000a  61a0              STR      r0,[r4,#0x18]  ; Tryzhdrtype
00000c  f7fffffe          BL       RZ_InitReceiver
;;;639      if ((i == ZCOMPL) || ((i == ZFILE) && ((RZ_ReceiveBatch(p)) == ZZOK))) {
000010  280f              CMP      r0,#0xf
000012  d00c              BEQ      |L30.46|
000014  2804              CMP      r0,#4
000016  d103              BNE      |L30.32|
000018  4628              MOV      r0,r5
00001a  f7fffffe          BL       RZ_ReceiveBatch
00001e  b130              CBZ      r0,|L30.46|
                  |L30.32|
;;;640        SendHEX(1,rxbytes>>24);
;;;641    		SendHEX(1,rxbytes>>16); 
;;;642    		SendHEX(1,rxbytes>>8); 
;;;643    		SendHEX(1,rxbytes);
;;;644        //SendBuffer(1," bytes received!!!\x0d\x0a");
;;;645    		printf("bytes received!!!\x0d\x0a");
;;;646        Z_ClearByte();
;;;647        return rxbytes;
;;;648        }
;;;649      else {
;;;650        //SendBuffer(1,"Download error!!!\x0d\x0a");
;;;651    		printf("Download error!!!\x0d\x0a");
000020  a010              ADR      r0,|L30.100|
000022  f7fffffe          BL       __2printf
;;;652        Z_ClearByte();
000026  f7fffffe          BL       Z_ClearByte
;;;653        return 0L;
00002a  2000              MOVS     r0,#0
;;;654        }
;;;655    }
00002c  bd70              POP      {r4-r6,pc}
                  |L30.46|
00002e  6ae0              LDR      r0,[r4,#0x2c]         ;640  ; rxbytes
000030  0e00              LSRS     r0,r0,#24             ;640
000032  f7fffffe          BL       zmputchar
000036  6ae0              LDR      r0,[r4,#0x2c]         ;641  ; rxbytes
000038  f3c04007          UBFX     r0,r0,#16,#8          ;641
00003c  f7fffffe          BL       zmputchar
000040  8da0              LDRH     r0,[r4,#0x2c]         ;642  ; rxbytes
000042  f3c02007          UBFX     r0,r0,#8,#8           ;642
000046  f7fffffe          BL       zmputchar
00004a  f894002c          LDRB     r0,[r4,#0x2c]         ;643  ; rxbytes
00004e  f7fffffe          BL       zmputchar
000052  a009              ADR      r0,|L30.120|
000054  f7fffffe          BL       __2printf
000058  f7fffffe          BL       Z_ClearByte
00005c  6ae0              LDR      r0,[r4,#0x2c]         ;647  ; rxbytes
00005e  bd70              POP      {r4-r6,pc}
;;;656    
                          ENDP

                  |L30.96|
                          DCD      ||.data||
                  |L30.100|
000064  446f776e          DCB      "Download error!!!\r\n",0
000068  6c6f6164
00006c  20657272
000070  6f722121
000074  210d0a00
                  |L30.120|
000078  62797465          DCB      "bytes received!!!\r\n",0
00007c  73207265
000080  63656976
000084  65642121
000088  210d0a00

                          AREA ||i.send_Zmodem||, CODE, READONLY, ALIGN=2

                  send_Zmodem PROC
;;;1133   /*--------------------------------------------------------------------------*/
;;;1134   DWORD send_Zmodem(BYTE *name, int numK)
000000  b570              PUSH     {r4-r6,lr}
;;;1135   {//numk ÎÄ¼þÊýÁ¿£¿
000002  460c              MOV      r4,r1
000004  4605              MOV      r5,r0
;;;1136   	Z_ClearByte();//ÔÝÊ±Ã»²»È·¶¨×÷ÓÃ
000006  f7fffffe          BL       Z_ClearByte
;;;1137   	
;;;1138   	Z_PutLongIntoHeader(0L);
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       Z_PutLongIntoHeader
;;;1139   	Z_SendHexHeader(ZRQINIT, Txhdr);
000010  490a              LDR      r1,|L31.60|
000012  2000              MOVS     r0,#0
000014  f7fffffe          BL       Z_SendHexHeader
;;;1140   
;;;1141   	if (ZS_GetReceiverInfo() == ZZERROR) return 0;
000018  f7fffffe          BL       ZS_GetReceiverInfo
00001c  1c40              ADDS     r0,r0,#1
00001e  d008              BEQ      |L31.50|
;;;1142   
;;;1143   	/*--------------------------------------------------------------------*/
;;;1144   	/* Check the results                                                  */
;;;1145   	/*--------------------------------------------------------------------*/
;;;1146   	if (ZS_SendFile(name, numK) == ZZERROR) { ZS_EndSend(); return 0; }
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       ZS_SendFile
000028  1c40              ADDS     r0,r0,#1
00002a  d003              BEQ      |L31.52|
;;;1147   	else									{ ZS_EndSend(); return numK; }
00002c  f7fffffe          BL       ZS_EndSend
000030  4620              MOV      r0,r4
                  |L31.50|
;;;1148   }
000032  bd70              POP      {r4-r6,pc}
                  |L31.52|
000034  f7fffffe          BL       ZS_EndSend
000038  2000              MOVS     r0,#0                 ;1146
00003a  bd70              POP      {r4-r6,pc}
;;;1149   
                          ENDP

                  |L31.60|
                          DCD      ||.data||+0x24

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  Attn
                          %        33
                  Recbuf
                          %        64
                  filename
                          %        32

                          AREA ||.data||, DATA, ALIGN=2

                  bTimeOut
000000  00                DCB      0x00
                  lastsent
000001  00                DCB      0x00
                  Zconv
000002  0000              DCB      0x00,0x00
                  Rxbuflen
                          DCD      0x00000000
                  modify
                          DCD      0x00000028
                  FileBuf
                          DCD      0x00000000
                  Rxtype
                          DCD      0x00000000
                  Rxframeind
                          DCD      0x00000000
                  Tryzhdrtype
                          DCD      0x00000000
                  RxCount
                          DCD      0x00000000
                  Rxhdr
                          DCD      0x00000000
                  Txhdr
                          DCD      0x00000000
                  Rxpos
                          DCD      0x00000000
                  rxbytes
                          DCD      0x00000000
                  filesize
                          DCD      0x00000000
                  Txpos
                          DCD      0x00000000
                  hex
000038  30313233          DCB      0x30,0x31,0x32,0x33
00003c  34353637          DCB      0x34,0x35,0x36,0x37
000040  38396162          DCB      0x38,0x39,0x61,0x62
000044  63646566          DCB      0x63,0x64,0x65,0x66
000048  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "zmodem\\zmodem.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_zmodem_c_bTimeOut____REV16|
#line 114 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_zmodem_c_bTimeOut____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_zmodem_c_bTimeOut____REVSH|
#line 128
|__asm___8_zmodem_c_bTimeOut____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
