; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M4.fp --apcs=interwork -L6969W -I..\..\..\..\Library\Device\Nuvoton\M451Series\Include -I..\..\..\..\Library\CMSIS\Include -I..\..\..\..\Library\StdDriver\inc -I..\..\..\..\Library\NuEdu\inc -I.\zmodem -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\4.1.0\CMSIS\Include -DDEBUG_ENABLE_SEMIHOST --omf_browse=.\obj\fmc.crf ..\..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;62       */
;;;63     void FMC_Close(void)
000000  4802              LDR      r0,|L1.12|
;;;64     {
;;;65         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210101          BIC      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;66     }
00000a  4770              BX       lr
;;;67     
                          ENDP

                  |L1.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_DisableAPUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableAPUpdate PROC
;;;79       */
;;;80     void FMC_DisableAPUpdate(void)
000000  4802              LDR      r0,|L2.12|
;;;81     {
;;;82         FMC->ISPCTL &= ~FMC_ISPCTL_APUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210108          BIC      r1,r1,#8
000008  6001              STR      r1,[r0,#0]
;;;83     }
00000a  4770              BX       lr
;;;84     
                          ENDP

                  |L2.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_DisableConfigUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableConfigUpdate PROC
;;;95       */
;;;96     void FMC_DisableConfigUpdate(void)
000000  4802              LDR      r0,|L3.12|
;;;97     {
;;;98         FMC->ISPCTL &= ~FMC_ISPCTL_CFGUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;99     }
00000a  4770              BX       lr
;;;100    
                          ENDP

                  |L3.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_DisableFreqOptimizeMode||, CODE, READONLY, ALIGN=2

                  FMC_DisableFreqOptimizeMode PROC
;;;306     */
;;;307    void FMC_DisableFreqOptimizeMode(void)
000000  4802              LDR      r0,|L4.12|
;;;308    {
;;;309        FMC->FTCTL &= ~FMC_FTCTL_FOM_Msk;
000002  6981              LDR      r1,[r0,#0x18]
000004  f0210170          BIC      r1,r1,#0x70
000008  6181              STR      r1,[r0,#0x18]
;;;310    }
00000a  4770              BX       lr
;;;311    
                          ENDP

                  |L4.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_DisableLDUpdate||, CODE, READONLY, ALIGN=2

                  FMC_DisableLDUpdate PROC
;;;111      */
;;;112    void FMC_DisableLDUpdate(void)
000000  4802              LDR      r0,|L5.12|
;;;113    {
;;;114        FMC->ISPCTL &= ~FMC_ISPCTL_LDUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210120          BIC      r1,r1,#0x20
000008  6001              STR      r1,[r0,#0]
;;;115    }
00000a  4770              BX       lr
;;;116    
                          ENDP

                  |L5.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_EnableAPUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableAPUpdate PROC
;;;127      */
;;;128    void FMC_EnableAPUpdate(void)
000000  4802              LDR      r0,|L6.12|
;;;129    {
;;;130        FMC->ISPCTL |= FMC_ISPCTL_APUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410108          ORR      r1,r1,#8
000008  6001              STR      r1,[r0,#0]
;;;131    }
00000a  4770              BX       lr
;;;132    
                          ENDP

                  |L6.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_EnableConfigUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableConfigUpdate PROC
;;;143      */
;;;144    void FMC_EnableConfigUpdate(void)
000000  4802              LDR      r0,|L7.12|
;;;145    {
;;;146        FMC->ISPCTL |= FMC_ISPCTL_CFGUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410110          ORR      r1,r1,#0x10
000008  6001              STR      r1,[r0,#0]
;;;147    }
00000a  4770              BX       lr
;;;148    
                          ENDP

                  |L7.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_EnableFreqOptimizeMode||, CODE, READONLY, ALIGN=2

                  FMC_EnableFreqOptimizeMode PROC
;;;288     */
;;;289    void FMC_EnableFreqOptimizeMode(uint32_t u32Mode)
000000  4904              LDR      r1,|L8.20|
;;;290    {
;;;291        FMC->FTCTL &= ~FMC_FTCTL_FOM_Msk;
000002  698a              LDR      r2,[r1,#0x18]
000004  f0220270          BIC      r2,r2,#0x70
000008  618a              STR      r2,[r1,#0x18]
;;;292        FMC->FTCTL |= (u32Mode << FMC_FTCTL_FOM_Pos);
00000a  698a              LDR      r2,[r1,#0x18]
00000c  ea421000          ORR      r0,r2,r0,LSL #4
000010  6188              STR      r0,[r1,#0x18]
;;;293    }
000012  4770              BX       lr
;;;294    
                          ENDP

                  |L8.20|
                          DCD      0x4000c000

                          AREA ||i.FMC_EnableLDUpdate||, CODE, READONLY, ALIGN=2

                  FMC_EnableLDUpdate PROC
;;;159      */
;;;160    void FMC_EnableLDUpdate(void)
000000  4802              LDR      r0,|L9.12|
;;;161    {
;;;162        FMC->ISPCTL |= FMC_ISPCTL_LDUEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410120          ORR      r1,r1,#0x20
000008  6001              STR      r1,[r0,#0]
;;;163    }
00000a  4770              BX       lr
;;;164    
                          ENDP

                  |L9.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;176      */
;;;177    int32_t FMC_GetBootSource(void)
000000  4803              LDR      r0,|L10.16|
;;;178    {
;;;179        if(FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
000002  6800              LDR      r0,[r0,#0]
000004  0780              LSLS     r0,r0,#30
000006  d501              BPL      |L10.12|
;;;180            return 1;
000008  2001              MOVS     r0,#1
;;;181        else
;;;182            return 0;
;;;183    }
00000a  4770              BX       lr
                  |L10.12|
00000c  2000              MOVS     r0,#0                 ;182
00000e  4770              BX       lr
;;;184    
                          ENDP

                  |L10.16|
                          DCD      0x4000c000

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;198      */
;;;199    void FMC_Open(void)
000000  4802              LDR      r0,|L11.12|
;;;200    {
;;;201        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;202    }
00000a  4770              BX       lr
;;;203    
                          ENDP

                  |L11.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;283     */
;;;284    static __INLINE uint32_t FMC_Read(uint32_t u32Addr)
000000  4905              LDR      r1,|L12.24|
;;;285    {
;;;286        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  2200              MOVS     r2,#0
000004  60ca              STR      r2,[r1,#0xc]
;;;287        FMC->ISPADDR = u32Addr;
000006  6048              STR      r0,[r1,#4]
;;;288        FMC->ISPDAT = 0;
000008  608a              STR      r2,[r1,#8]
;;;289        FMC->ISPTRG = 0x1;
00000a  2001              MOVS     r0,#1
00000c  6108              STR      r0,[r1,#0x10]
                  |L12.14|
;;;290    #if ISBEN
;;;291        __ISB();
;;;292    #endif
;;;293        while(FMC->ISPTRG);
00000e  6908              LDR      r0,[r1,#0x10]
000010  2800              CMP      r0,#0
000012  d1fc              BNE      |L12.14|
;;;294    
;;;295        return FMC->ISPDAT;
000014  6888              LDR      r0,[r1,#8]
;;;296    }
000016  4770              BX       lr
;;;297    
                          ENDP

                  |L12.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=1

                  FMC_ReadConfig PROC
;;;232      */
;;;233    int32_t FMC_ReadConfig(uint32_t *u32Config, uint32_t u32Count)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;234    {
000004  460d              MOV      r5,r1
000006  4606              MOV      r6,r0
;;;235        int32_t i;
;;;236    
;;;237        for(i = 0; i < u32Count; i++)
000008  2400              MOVS     r4,#0
;;;238            u32Config[i] = FMC_Read(FMC_CONFIG_BASE + i * 4);
00000a  f44f1740          MOV      r7,#0x300000
00000e  e006              B        |L13.30|
                  |L13.16|
000010  eb070084          ADD      r0,r7,r4,LSL #2
000014  f7fffffe          BL       FMC_Read
000018  f8460024          STR      r0,[r6,r4,LSL #2]
00001c  1c64              ADDS     r4,r4,#1
                  |L13.30|
00001e  42ac              CMP      r4,r5                 ;237
000020  d3f6              BCC      |L13.16|
;;;239    
;;;240        return 0;
000022  2000              MOVS     r0,#0
;;;241    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;242    
                          ENDP


                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;213      */
;;;214    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L14.8|
;;;215    {
;;;216        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;217    }
000004  4770              BX       lr
;;;218    
                          ENDP

000006  0000              DCW      0x0000
                  |L14.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;43       */
;;;44     void FMC_SetBootSource(int32_t i32BootSrc)
000000  4905              LDR      r1,|L15.24|
;;;45     {
;;;46         if(i32BootSrc)
000002  2800              CMP      r0,#0
;;;47             FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
;;;48         else
;;;49             FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L15.14|
000008  f0400002          ORR      r0,r0,#2              ;47
00000c  e001              B        |L15.18|
                  |L15.14|
00000e  f0200002          BIC      r0,r0,#2
                  |L15.18|
000012  6008              STR      r0,[r1,#0]            ;47
;;;50     }
000014  4770              BX       lr
;;;51     
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;257      */
;;;258    int32_t FMC_WriteConfig(uint32_t *u32Config, uint32_t u32Count)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;259    {
000004  460f              MOV      r7,r1
000006  4606              MOV      r6,r0
;;;260        int32_t i;
;;;261    
;;;262        for(i = 0; i < u32Count; i++)
000008  2400              MOVS     r4,#0
00000a  4d12              LDR      r5,|L16.84|
;;;263        {
;;;264            FMC_Write(FMC_CONFIG_BASE + i * 4, u32Config[i]);
00000c  f44f1840          MOV      r8,#0x300000
000010  f04f0921          MOV      r9,#0x21
000014  f04f0a01          MOV      r10,#1
000018  e017              B        |L16.74|
                  |L16.26|
00001a  f8561024          LDR      r1,[r6,r4,LSL #2]
00001e  eb080084          ADD      r0,r8,r4,LSL #2
000022  f8c5900c          STR      r9,[r5,#0xc]
000026  6068              STR      r0,[r5,#4]
000028  60a9              STR      r1,[r5,#8]
00002a  f8c5a010          STR      r10,[r5,#0x10]
                  |L16.46|
00002e  6929              LDR      r1,[r5,#0x10]
000030  2900              CMP      r1,#0
000032  d1fc              BNE      |L16.46|
;;;265            if(FMC_Read(FMC_CONFIG_BASE + i * 4) != u32Config[i])
000034  f7fffffe          BL       FMC_Read
000038  f8561024          LDR      r1,[r6,r4,LSL #2]
00003c  4288              CMP      r0,r1
00003e  d003              BEQ      |L16.72|
;;;266                return -1;
000040  f04f30ff          MOV      r0,#0xffffffff
                  |L16.68|
;;;267        }
;;;268    
;;;269        return 0;
;;;270    }
000044  e8bd87f0          POP      {r4-r10,pc}
                  |L16.72|
000048  1c64              ADDS     r4,r4,#1
                  |L16.74|
00004a  42bc              CMP      r4,r7                 ;262
00004c  d3e5              BCC      |L16.26|
00004e  2000              MOVS     r0,#0                 ;269
000050  e7f8              B        |L16.68|
;;;271    
                          ENDP

000052  0000              DCW      0x0000
                  |L16.84|
                          DCD      0x4000c000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_15679c7a____REV16|
#line 114 "..\\..\\..\\..\\Library\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_fmc_c_15679c7a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_15679c7a____REVSH|
#line 128
|__asm___5_fmc_c_15679c7a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
